
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004790  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001500c  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801993c  0801993c  0003947c  2**0
                  CONTENTS
  4 .ARM          00000008  0801993c  0801993c  0002993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019944  08019944  0003947c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019944  08019944  00029944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019948  08019948  00029948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000947c  20000000  0801994c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002998  2000947c  08022dc8  0003947c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000be14  08022dc8  0003be14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003947c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf0a  00000000  00000000  000394ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3c  00000000  00000000  000453b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  00046ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  00047bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b50  00000000  00000000  000487e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009370  00000000  00000000  0005e330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d059  00000000  00000000  000676a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f46f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e0  00000000  00000000  000f4774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000947c 	.word	0x2000947c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004918 	.word	0x08004918

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20009480 	.word	0x20009480
 80001dc:	08004918 	.word	0x08004918

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <WinningCat>:
const char clearLine[] = "\033[2K";

//const char moveCurLeftWelcome[] = "\033[4;0H";
const char inputPrompt[] = "\033[37;101mPu\033[30;42mRo\033[30;103mMu\033[37;104mTo\033[37;40m: ";

void WinningCat() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	MoveCurTo(gameData.numberOfLines + 7, 34); print("　　　　∧,,∧");
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <WinningCat+0x58>)
 80005b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005b8:	3307      	adds	r3, #7
 80005ba:	2122      	movs	r1, #34	; 0x22
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 ff53 	bl	8001468 <MoveCurTo>
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <WinningCat+0x5c>)
 80005c4:	f000 f8f6 	bl	80007b4 <print>
	MoveCurTo(gameData.numberOfLines + 8, 34); print(" ☆二　⊂(・ω・｀)");
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <WinningCat+0x58>)
 80005ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005cc:	3308      	adds	r3, #8
 80005ce:	2122      	movs	r1, #34	; 0x22
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 ff49 	bl	8001468 <MoveCurTo>
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <WinningCat+0x60>)
 80005d8:	f000 f8ec 	bl	80007b4 <print>
	MoveCurTo(gameData.numberOfLines + 9, 34); print("　　　　-ヽ　　と)");
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <WinningCat+0x58>)
 80005de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005e0:	3309      	adds	r3, #9
 80005e2:	2122      	movs	r1, #34	; 0x22
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff3f 	bl	8001468 <MoveCurTo>
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <WinningCat+0x64>)
 80005ec:	f000 f8e2 	bl	80007b4 <print>
	MoveCurTo(gameData.numberOfLines + 10, 34); print(" 　　　　　｀ｕ-ｕ'");
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <WinningCat+0x58>)
 80005f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005f4:	330a      	adds	r3, #10
 80005f6:	2122      	movs	r1, #34	; 0x22
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 ff35 	bl	8001468 <MoveCurTo>
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <WinningCat+0x68>)
 8000600:	f000 f8d8 	bl	80007b4 <print>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000bce8 	.word	0x2000bce8
 800060c:	08019510 	.word	0x08019510
 8000610:	08019528 	.word	0x08019528
 8000614:	08019544 	.word	0x08019544
 8000618:	08019560 	.word	0x08019560

0800061c <init>:

void init() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	Refresh();
 8000622:	f000 ff0d 	bl	8001440 <Refresh>
	SetFontBold();
 8000626:	f000 ff55 	bl	80014d4 <SetFontBold>
	WelcomePagePrompt();
 800062a:	f000 faa7 	bl	8000b7c <WelcomePagePrompt>
	gameData.gameState = 0;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	65da      	str	r2, [r3, #92]	; 0x5c
	gameData.speed = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <init+0x64>)
 8000636:	2201      	movs	r2, #1
 8000638:	651a      	str	r2, [r3, #80]	; 0x50
	gameData.numberOfLines = 4;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <init+0x64>)
 800063c:	2204      	movs	r2, #4
 800063e:	655a      	str	r2, [r3, #84]	; 0x54
	gameData.highScore = 0;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	659a      	str	r2, [r3, #88]	; 0x58
	gameData.currentScore = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	661a      	str	r2, [r3, #96]	; 0x60
	for(int i = 0; i < 10; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e00f      	b.n	8000672 <init+0x56>
		gameData.linesLength[i] = 0;
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <init+0x64>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	330a      	adds	r3, #10
 8000658:	2100      	movs	r1, #0
 800065a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		gameData.lines[i] = listInit();
 800065e:	f000 f981 	bl	8000964 <listInit>
 8000662:	4601      	mov	r1, r0
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <init+0x64>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 10; i++) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b09      	cmp	r3, #9
 8000676:	ddec      	ble.n	8000652 <init+0x36>
	}
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000bce8 	.word	0x2000bce8

08000684 <driver>:

void driver() {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	switch(gameData.gameState){
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <driver+0xa0>)
 800068a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800068c:	2b16      	cmp	r3, #22
 800068e:	d843      	bhi.n	8000718 <driver+0x94>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <driver+0x14>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006f5 	.word	0x080006f5
 800069c:	080006fb 	.word	0x080006fb
 80006a0:	08000707 	.word	0x08000707
 80006a4:	08000719 	.word	0x08000719
 80006a8:	08000719 	.word	0x08000719
 80006ac:	08000719 	.word	0x08000719
 80006b0:	08000719 	.word	0x08000719
 80006b4:	08000719 	.word	0x08000719
 80006b8:	08000719 	.word	0x08000719
 80006bc:	08000719 	.word	0x08000719
 80006c0:	08000719 	.word	0x08000719
 80006c4:	08000701 	.word	0x08000701
 80006c8:	08000719 	.word	0x08000719
 80006cc:	08000719 	.word	0x08000719
 80006d0:	08000719 	.word	0x08000719
 80006d4:	08000719 	.word	0x08000719
 80006d8:	08000719 	.word	0x08000719
 80006dc:	08000719 	.word	0x08000719
 80006e0:	08000719 	.word	0x08000719
 80006e4:	08000719 	.word	0x08000719
 80006e8:	08000719 	.word	0x08000719
 80006ec:	0800070d 	.word	0x0800070d
 80006f0:	08000713 	.word	0x08000713
	case 0:
		WelcomePageHandler();
 80006f4:	f000 fa76 	bl	8000be4 <WelcomePageHandler>
		break;
 80006f8:	e011      	b.n	800071e <driver+0x9a>
	case 1:
		PlayingPageHandler();
 80006fa:	f000 fb4f 	bl	8000d9c <PlayingPageHandler>
		break;
 80006fe:	e00e      	b.n	800071e <driver+0x9a>
	case 11:
		DeadPageHandler();
 8000700:	f000 fc7c 	bl	8000ffc <DeadPageHandler>
		break;
 8000704:	e00b      	b.n	800071e <driver+0x9a>
	case 2:
		SettingPageHandler();
 8000706:	f000 fce3 	bl	80010d0 <SettingPageHandler>
		break;
 800070a:	e008      	b.n	800071e <driver+0x9a>
	case 21:
		SettingDifficultyHandler();
 800070c:	f000 fd6e 	bl	80011ec <SettingDifficultyHandler>
		break;
 8000710:	e005      	b.n	800071e <driver+0x9a>
	case 22:
		SettingSpeedHandler();
 8000712:	f000 fdfd 	bl	8001310 <SettingSpeedHandler>
		break;
 8000716:	e002      	b.n	800071e <driver+0x9a>
	default:
		WelcomePageHandler();
 8000718:	f000 fa64 	bl	8000be4 <WelcomePageHandler>
		break;
 800071c:	bf00      	nop
	}
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000bce8 	.word	0x2000bce8

08000728 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	InputHandler();
 8000730:	f000 f996 	bl	8000a60 <InputHandler>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
//	return;
	currentTxQueueIndex++;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 800074c:	6013      	str	r3, [r2, #0]
	if(currentTxQueueIndex == 100)
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b64      	cmp	r3, #100	; 0x64
 8000754:	d104      	bne.n	8000760 <HAL_UART_TxCpltCallback+0x24>
		currentTxQueueIndex -= 100;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b64      	subs	r3, #100	; 0x64
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 800075e:	6013      	str	r3, [r2, #0]

	if(currentTxQueueIndex == endTxQueueIndex) return;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_UART_TxCpltCallback+0x68>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d015      	beq.n	8000798 <HAL_UART_TxCpltCallback+0x5c>
	strcpy(txBuffer, txQueue[currentTxQueueIndex]);
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_UART_TxCpltCallback+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2264      	movs	r2, #100	; 0x64
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <HAL_UART_TxCpltCallback+0x6c>)
 8000778:	4413      	add	r3, r2
 800077a:	4619      	mov	r1, r3
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <HAL_UART_TxCpltCallback+0x70>)
 800077e:	f003 fd80 	bl	8004282 <strcpy>
	HAL_UART_Transmit_IT(&huart2, (unsigned char *)txBuffer, strlen(txBuffer));
 8000782:	480a      	ldr	r0, [pc, #40]	; (80007ac <HAL_UART_TxCpltCallback+0x70>)
 8000784:	f7ff fd36 	bl	80001f4 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29b      	uxth	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	4907      	ldr	r1, [pc, #28]	; (80007ac <HAL_UART_TxCpltCallback+0x70>)
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <HAL_UART_TxCpltCallback+0x74>)
 8000792:	f002 fdb2 	bl	80032fa <HAL_UART_Transmit_IT>
 8000796:	e000      	b.n	800079a <HAL_UART_TxCpltCallback+0x5e>
	if(currentTxQueueIndex == endTxQueueIndex) return;
 8000798:	bf00      	nop
}
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20009498 	.word	0x20009498
 80007a4:	2000949c 	.word	0x2000949c
 80007a8:	200095d8 	.word	0x200095d8
 80007ac:	20009574 	.word	0x20009574
 80007b0:	2000bdc8 	.word	0x2000bdc8

080007b4 <print>:

//void HAL_TIM_PeriodElaspedCallback(TIM_HandleTypeDef *htim) {
//}

void print(const void * s) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	s = (char * ) s;
//	HAL_UART_Transmit(&huart2, (unsigned char *) s, strlen(s), HAL_MAX_DELAY);
//	return;
	if(strlen(s) == 0) return;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d03d      	beq.n	8000840 <print+0x8c>
	strcpy(txQueue[endTxQueueIndex], s);
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <print+0x94>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2264      	movs	r2, #100	; 0x64
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	4a1f      	ldr	r2, [pc, #124]	; (800084c <print+0x98>)
 80007d0:	4413      	add	r3, r2
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fd54 	bl	8004282 <strcpy>
	endTxQueueIndex++;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <print+0x94>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <print+0x94>)
 80007e2:	6013      	str	r3, [r2, #0]
	if(endTxQueueIndex == 100)
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <print+0x94>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b64      	cmp	r3, #100	; 0x64
 80007ea:	d104      	bne.n	80007f6 <print+0x42>
		endTxQueueIndex -= 100;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <print+0x94>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3b64      	subs	r3, #100	; 0x64
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <print+0x94>)
 80007f4:	6013      	str	r3, [r2, #0]

	if(endTxQueueIndex - 1 == currentTxQueueIndex || endTxQueueIndex + 99 == currentTxQueueIndex) {
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <print+0x94>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <print+0x9c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d007      	beq.n	8000814 <print+0x60>
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <print+0x94>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f103 0263 	add.w	r2, r3, #99	; 0x63
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <print+0x9c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d116      	bne.n	8000842 <print+0x8e>
		strcpy(txBuffer, txQueue[currentTxQueueIndex]);
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <print+0x9c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <print+0x98>)
 8000820:	4413      	add	r3, r2
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <print+0xa0>)
 8000826:	f003 fd2c 	bl	8004282 <strcpy>
		HAL_UART_Transmit_IT(&huart2, (unsigned char *) txBuffer, strlen(txBuffer));
 800082a:	480a      	ldr	r0, [pc, #40]	; (8000854 <print+0xa0>)
 800082c:	f7ff fce2 	bl	80001f4 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29b      	uxth	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	4907      	ldr	r1, [pc, #28]	; (8000854 <print+0xa0>)
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <print+0xa4>)
 800083a:	f002 fd5e 	bl	80032fa <HAL_UART_Transmit_IT>
 800083e:	e000      	b.n	8000842 <print+0x8e>
	if(strlen(s) == 0) return;
 8000840:	bf00      	nop
	}
}
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000949c 	.word	0x2000949c
 800084c:	200095d8 	.word	0x200095d8
 8000850:	20009498 	.word	0x20009498
 8000854:	20009574 	.word	0x20009574
 8000858:	2000bdc8 	.word	0x2000bdc8

0800085c <append>:

void append(struct list * lisPtr, char * newData) {
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	struct node * np = malloc(sizeof(struct node));
 8000866:	200c      	movs	r0, #12
 8000868:	f003 fbb4 	bl	8003fd4 <malloc>
 800086c:	4603      	mov	r3, r0
 800086e:	60fb      	str	r3, [r7, #12]
	np->data = newData;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
	np->back = lisPtr->tail;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	609a      	str	r2, [r3, #8]
	np->next = lisPtr->head;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	605a      	str	r2, [r3, #4]
	lisPtr->head->back = np;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	609a      	str	r2, [r3, #8]
	lisPtr->tail->next = np;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	605a      	str	r2, [r3, #4]
	lisPtr->tail = np;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	60da      	str	r2, [r3, #12]
	lisPtr->size++;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	605a      	str	r2, [r3, #4]
	lisPtr->stringSize += strlen(np->data);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	461c      	mov	r4, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc9f 	bl	80001f4 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4423      	add	r3, r4
 80008ba:	461a      	mov	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}

080008c8 <searchAndRemove>:

int searchAndRemove(struct list * lisPtr, char * s) {
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	struct node * np = lisPtr->head->next;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	60fb      	str	r3, [r7, #12]
	while(np != lisPtr->head) {
 80008da:	e037      	b.n	800094c <searchAndRemove+0x84>
		if(strcmp(np->data, s) == 0){
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fc7c 	bl	80001e0 <strcmp>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d12b      	bne.n	8000946 <searchAndRemove+0x7e>
			np->next->back = np->back;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	6892      	ldr	r2, [r2, #8]
 80008f6:	609a      	str	r2, [r3, #8]
			np->back->next = np->next;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	6852      	ldr	r2, [r2, #4]
 8000900:	605a      	str	r2, [r3, #4]
			lisPtr->size--;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]
			lisPtr->stringSize -= strlen(np->data);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	461c      	mov	r4, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc6c 	bl	80001f4 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	1ae3      	subs	r3, r4, r3
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
			free(np);
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f003 fb5c 	bl	8003fe4 <free>
			gameData.currentScore += strlen(s);
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <searchAndRemove+0x98>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	461c      	mov	r4, r3
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f7ff fc5e 	bl	80001f4 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	4423      	add	r3, r4
 800093c:	461a      	mov	r2, r3
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <searchAndRemove+0x98>)
 8000940:	661a      	str	r2, [r3, #96]	; 0x60
			return 1;
 8000942:	2301      	movs	r3, #1
 8000944:	e008      	b.n	8000958 <searchAndRemove+0x90>
		}
		np = np->next;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
	while(np != lisPtr->head) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	429a      	cmp	r2, r3
 8000954:	d1c2      	bne.n	80008dc <searchAndRemove+0x14>
	}
	return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	2000bce8 	.word	0x2000bce8

08000964 <listInit>:

struct list * listInit() {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	struct node * headerNode = malloc(sizeof(struct node));
 800096a:	200c      	movs	r0, #12
 800096c:	f003 fb32 	bl	8003fd4 <malloc>
 8000970:	4603      	mov	r3, r0
 8000972:	607b      	str	r3, [r7, #4]
	headerNode->data = "";
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <listInit+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
	headerNode->back = headerNode;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	609a      	str	r2, [r3, #8]
	headerNode->next = headerNode;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]
	struct list * listPtr = malloc(sizeof(struct list));
 8000986:	2010      	movs	r0, #16
 8000988:	f003 fb24 	bl	8003fd4 <malloc>
 800098c:	4603      	mov	r3, r0
 800098e:	603b      	str	r3, [r7, #0]
	listPtr->stringSize = 0;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
	listPtr->size = 0;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
	listPtr->head = headerNode;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	609a      	str	r2, [r3, #8]
	listPtr->tail = headerNode;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	60da      	str	r2, [r3, #12]
	return listPtr;
 80009a8:	683b      	ldr	r3, [r7, #0]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	0801957c 	.word	0x0801957c

080009b8 <emptiedList>:

void emptiedList(struct list * lisPtr) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	struct node * tempNode = lisPtr->head->next;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
	while(tempNode != lisPtr->head){
 80009c8:	e007      	b.n	80009da <emptiedList+0x22>
		struct node * delNode = tempNode;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
		tempNode = tempNode->next;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	60fb      	str	r3, [r7, #12]
		free(delNode);
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f003 fb05 	bl	8003fe4 <free>
	while(tempNode != lisPtr->head){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d1f2      	bne.n	80009ca <emptiedList+0x12>
	}
	lisPtr->head->next = lisPtr->head;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6892      	ldr	r2, [r2, #8]
 80009ec:	605a      	str	r2, [r3, #4]
	lisPtr->head->back = lisPtr->head;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6892      	ldr	r2, [r2, #8]
 80009f6:	609a      	str	r2, [r3, #8]
	lisPtr->tail = lisPtr->head;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60da      	str	r2, [r3, #12]
	lisPtr->stringSize = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
	lisPtr->size = 0;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <getRandWord>:

char * getRandWord() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	return DICT[rand() % 9474];
 8000a18:	f003 fbc0 	bl	800419c <rand>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <getRandWord+0x2c>)
 8000a20:	fb83 1302 	smull	r1, r3, r3, r2
 8000a24:	1319      	asrs	r1, r3, #12
 8000a26:	17d3      	asrs	r3, r2, #31
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	f242 5102 	movw	r1, #9474	; 0x2502
 8000a2e:	fb01 f303 	mul.w	r3, r1, r3
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <getRandWord+0x30>)
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	6eade8c3 	.word	0x6eade8c3
 8000a44:	20000000 	.word	0x20000000

08000a48 <setRandSeed>:

void setRandSeed() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	srand(SysTick->VAL);
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <setRandSeed+0x14>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fb7f 	bl	8004154 <srand>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <InputHandler>:

char InputHandler() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if(receive[0] == '\r') { // Enter
 8000a64:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <InputHandler+0xfc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b0d      	cmp	r3, #13
 8000a6a:	d126      	bne.n	8000aba <InputHandler+0x5a>
		if(strcmp(line, "debug2") == 0) {
 8000a6c:	493c      	ldr	r1, [pc, #240]	; (8000b60 <InputHandler+0x100>)
 8000a6e:	483d      	ldr	r0, [pc, #244]	; (8000b64 <InputHandler+0x104>)
 8000a70:	f7ff fbb6 	bl	80001e0 <strcmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d108      	bne.n	8000a8c <InputHandler+0x2c>
			DrawGrid();
 8000a7a:	f000 fd35 	bl	80014e8 <DrawGrid>
			MoveCurTo(23, 1);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2017      	movs	r0, #23
 8000a82:	f000 fcf1 	bl	8001468 <MoveCurTo>
			print("\033[1m");
 8000a86:	4838      	ldr	r0, [pc, #224]	; (8000b68 <InputHandler+0x108>)
 8000a88:	f7ff fe94 	bl	80007b4 <print>
		}
		if(strcmp(line, "debug3") == 0) {
 8000a8c:	4937      	ldr	r1, [pc, #220]	; (8000b6c <InputHandler+0x10c>)
 8000a8e:	4835      	ldr	r0, [pc, #212]	; (8000b64 <InputHandler+0x104>)
 8000a90:	f7ff fba6 	bl	80001e0 <strcmp>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <InputHandler+0x46>
			print(reset);
 8000a9a:	4835      	ldr	r0, [pc, #212]	; (8000b70 <InputHandler+0x110>)
 8000a9c:	f7ff fe8a 	bl	80007b4 <print>
			print("blahblag");
 8000aa0:	4834      	ldr	r0, [pc, #208]	; (8000b74 <InputHandler+0x114>)
 8000aa2:	f7ff fe87 	bl	80007b4 <print>
		}
		strcpy(finishedLine, line);
 8000aa6:	492f      	ldr	r1, [pc, #188]	; (8000b64 <InputHandler+0x104>)
 8000aa8:	4833      	ldr	r0, [pc, #204]	; (8000b78 <InputHandler+0x118>)
 8000aaa:	f003 fbea 	bl	8004282 <strcpy>
		strcpy(line, "");
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <InputHandler+0x104>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
		return receive[0];
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <InputHandler+0xfc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	e04d      	b.n	8000b56 <InputHandler+0xf6>
	}
	if(receive[0] == '\e') { // What's dis...
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <InputHandler+0xfc>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b1b      	cmp	r3, #27
 8000ac0:	d102      	bne.n	8000ac8 <InputHandler+0x68>
		return receive[0];
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <InputHandler+0xfc>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	e046      	b.n	8000b56 <InputHandler+0xf6>
	}
	if(receive[0] == '[' || receive[0] == 'A' || receive[0] == 'B' || receive[0] == 'C' || receive[0] == 'D') { // ALL Arrow BANNED / I Gave up.
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <InputHandler+0xfc>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b5b      	cmp	r3, #91	; 0x5b
 8000ace:	d00f      	beq.n	8000af0 <InputHandler+0x90>
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <InputHandler+0xfc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b41      	cmp	r3, #65	; 0x41
 8000ad6:	d00b      	beq.n	8000af0 <InputHandler+0x90>
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <InputHandler+0xfc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b42      	cmp	r3, #66	; 0x42
 8000ade:	d007      	beq.n	8000af0 <InputHandler+0x90>
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <InputHandler+0xfc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b43      	cmp	r3, #67	; 0x43
 8000ae6:	d003      	beq.n	8000af0 <InputHandler+0x90>
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <InputHandler+0xfc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b44      	cmp	r3, #68	; 0x44
 8000aee:	d102      	bne.n	8000af6 <InputHandler+0x96>
		return receive[0];
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <InputHandler+0xfc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e02f      	b.n	8000b56 <InputHandler+0xf6>
	}
	if(receive[0] == '\177') { //Backspace
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <InputHandler+0xfc>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b7f      	cmp	r3, #127	; 0x7f
 8000afc:	d114      	bne.n	8000b28 <InputHandler+0xc8>
		if(strlen(line) == 0) return receive[0];
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <InputHandler+0x104>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <InputHandler+0xac>
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <InputHandler+0xfc>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	e024      	b.n	8000b56 <InputHandler+0xf6>
		print(receive);
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <InputHandler+0xfc>)
 8000b0e:	f7ff fe51 	bl	80007b4 <print>
		line[strlen(line) - 1] = '\0';
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <InputHandler+0x104>)
 8000b14:	f7ff fb6e 	bl	80001f4 <strlen>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <InputHandler+0x104>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	54d1      	strb	r1, [r2, r3]
		return receive[0];
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <InputHandler+0xfc>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	e016      	b.n	8000b56 <InputHandler+0xf6>
	}
	// Default
	strncat(line, receive, 1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	490c      	ldr	r1, [pc, #48]	; (8000b5c <InputHandler+0xfc>)
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <InputHandler+0x104>)
 8000b2e:	f003 fbb0 	bl	8004292 <strncat>
	print(receive);
 8000b32:	480a      	ldr	r0, [pc, #40]	; (8000b5c <InputHandler+0xfc>)
 8000b34:	f7ff fe3e 	bl	80007b4 <print>
	if(strlen(line) > 97) {
 8000b38:	480a      	ldr	r0, [pc, #40]	; (8000b64 <InputHandler+0x104>)
 8000b3a:	f7ff fb5b 	bl	80001f4 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b61      	cmp	r3, #97	; 0x61
 8000b42:	d906      	bls.n	8000b52 <InputHandler+0xf2>
		strcpy(finishedLine, line);
 8000b44:	4907      	ldr	r1, [pc, #28]	; (8000b64 <InputHandler+0x104>)
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <InputHandler+0x118>)
 8000b48:	f003 fb9b 	bl	8004282 <strcpy>
		strcpy(line, "");
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <InputHandler+0x104>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	}
	return receive[0];
 8000b52:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <InputHandler+0xfc>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20009408 	.word	0x20009408
 8000b60:	08019580 	.word	0x08019580
 8000b64:	200094a0 	.word	0x200094a0
 8000b68:	08019588 	.word	0x08019588
 8000b6c:	08019590 	.word	0x08019590
 8000b70:	080198ac 	.word	0x080198ac
 8000b74:	08019598 	.word	0x08019598
 8000b78:	20009504 	.word	0x20009504

08000b7c <WelcomePagePrompt>:

void WelcomePagePrompt() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	DrawGrid();
 8000b80:	f000 fcb2 	bl	80014e8 <DrawGrid>
	PrintCentered("\033[48;5;248m\033[38;5;93mWel\033[38;5;17mcome \033[38;5;14mto \033[38;5;10mText \033[38;5;11mSur", 3, 25);
 8000b84:	2219      	movs	r2, #25
 8000b86:	2103      	movs	r1, #3
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <WelcomePagePrompt+0x50>)
 8000b8a:	f000 fcdf 	bl	800154c <PrintCentered>
	print("\033[38;5;214mvi\033[38;5;196mval!");
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <WelcomePagePrompt+0x54>)
 8000b90:	f7ff fe10 	bl	80007b4 <print>
	SetColorResetWithBold();
 8000b94:	f000 fc8a 	bl	80014ac <SetColorResetWithBold>
	MoveCurTo(4, 5); print("1) Play");
 8000b98:	2105      	movs	r1, #5
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f000 fc64 	bl	8001468 <MoveCurTo>
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <WelcomePagePrompt+0x58>)
 8000ba2:	f7ff fe07 	bl	80007b4 <print>
	MoveCurTo(5, 5); print("2) Setting");
 8000ba6:	2105      	movs	r1, #5
 8000ba8:	2005      	movs	r0, #5
 8000baa:	f000 fc5d 	bl	8001468 <MoveCurTo>
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <WelcomePagePrompt+0x5c>)
 8000bb0:	f7ff fe00 	bl	80007b4 <print>
	MoveCurTo(6, 5); print(inputPrompt); print(line);
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	2006      	movs	r0, #6
 8000bb8:	f000 fc56 	bl	8001468 <MoveCurTo>
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <WelcomePagePrompt+0x60>)
 8000bbe:	f7ff fdf9 	bl	80007b4 <print>
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <WelcomePagePrompt+0x64>)
 8000bc4:	f7ff fdf6 	bl	80007b4 <print>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	080195a4 	.word	0x080195a4
 8000bd0:	080195f8 	.word	0x080195f8
 8000bd4:	08019618 	.word	0x08019618
 8000bd8:	08019620 	.word	0x08019620
 8000bdc:	080198b8 	.word	0x080198b8
 8000be0:	200094a0 	.word	0x200094a0

08000be4 <WelcomePageHandler>:

void WelcomePageHandler() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (unsigned char *)receive, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	4919      	ldr	r1, [pc, #100]	; (8000c50 <WelcomePageHandler+0x6c>)
 8000bec:	4819      	ldr	r0, [pc, #100]	; (8000c54 <WelcomePageHandler+0x70>)
 8000bee:	f002 fbc9 	bl	8003384 <HAL_UART_Receive_IT>
	if(receive[0] != '\r') return;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <WelcomePageHandler+0x6c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b0d      	cmp	r3, #13
 8000bf8:	d128      	bne.n	8000c4c <WelcomePageHandler+0x68>
	receive[0] = 'X';
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <WelcomePageHandler+0x6c>)
 8000bfc:	2258      	movs	r2, #88	; 0x58
 8000bfe:	701a      	strb	r2, [r3, #0]
	if(strcmp(finishedLine, "1") == 0) {
 8000c00:	4915      	ldr	r1, [pc, #84]	; (8000c58 <WelcomePageHandler+0x74>)
 8000c02:	4816      	ldr	r0, [pc, #88]	; (8000c5c <WelcomePageHandler+0x78>)
 8000c04:	f7ff faec 	bl	80001e0 <strcmp>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d105      	bne.n	8000c1a <WelcomePageHandler+0x36>
		StartPlayInit();
 8000c0e:	f000 f979 	bl	8000f04 <StartPlayInit>
		gameData.gameState = 1;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <WelcomePageHandler+0x7c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	65da      	str	r2, [r3, #92]	; 0x5c
		return;
 8000c18:	e019      	b.n	8000c4e <WelcomePageHandler+0x6a>
	}
	if(strcmp(finishedLine, "2") == 0) {
 8000c1a:	4912      	ldr	r1, [pc, #72]	; (8000c64 <WelcomePageHandler+0x80>)
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <WelcomePageHandler+0x78>)
 8000c1e:	f7ff fadf 	bl	80001e0 <strcmp>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <WelcomePageHandler+0x50>
		SettingPageInit();
 8000c28:	f000 fa06 	bl	8001038 <SettingPageInit>
		gameData.gameState = 2;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <WelcomePageHandler+0x7c>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	65da      	str	r2, [r3, #92]	; 0x5c
		return;
 8000c32:	e00c      	b.n	8000c4e <WelcomePageHandler+0x6a>
	}
	ClearLine();
 8000c34:	f000 fc0e 	bl	8001454 <ClearLine>
	DrawGrid();
 8000c38:	f000 fc56 	bl	80014e8 <DrawGrid>
	MoveCurTo(6, 5); print(inputPrompt);
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f000 fc12 	bl	8001468 <MoveCurTo>
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <WelcomePageHandler+0x84>)
 8000c46:	f7ff fdb5 	bl	80007b4 <print>
 8000c4a:	e000      	b.n	8000c4e <WelcomePageHandler+0x6a>
	if(receive[0] != '\r') return;
 8000c4c:	bf00      	nop
}
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20009408 	.word	0x20009408
 8000c54:	2000bdc8 	.word	0x2000bdc8
 8000c58:	0801962c 	.word	0x0801962c
 8000c5c:	20009504 	.word	0x20009504
 8000c60:	2000bce8 	.word	0x2000bce8
 8000c64:	08019630 	.word	0x08019630
 8000c68:	080198b8 	.word	0x080198b8

08000c6c <PlayingPageInfo>:

void PlayingPageInfo() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09e      	sub	sp, #120	; 0x78
 8000c70:	af00      	add	r7, sp, #0
	Refresh();
 8000c72:	f000 fbe5 	bl	8001440 <Refresh>

	SetColorBrightRedBG_BlackLetter();
 8000c76:	f000 fc0f 	bl	8001498 <SetColorBrightRedBG_BlackLetter>
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	677b      	str	r3, [r7, #116]	; 0x74
 8000c7e:	e00b      	b.n	8000c98 <PlayingPageInfo+0x2c>
		MoveCurTo(i + 5, 64);
 8000c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c82:	3305      	adds	r3, #5
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fbee 	bl	8001468 <MoveCurTo>
		print("XX");
 8000c8c:	483c      	ldr	r0, [pc, #240]	; (8000d80 <PlayingPageInfo+0x114>)
 8000c8e:	f7ff fd91 	bl	80007b4 <print>
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c94:	3301      	adds	r3, #1
 8000c96:	677b      	str	r3, [r7, #116]	; 0x74
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <PlayingPageInfo+0x118>)
 8000c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbee      	blt.n	8000c80 <PlayingPageInfo+0x14>
	}
	SetColorResetWithBold();
 8000ca2:	f000 fc03 	bl	80014ac <SetColorResetWithBold>

	sprintf(gameData.currentScoreString, "%d", gameData.currentScore);
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <PlayingPageInfo+0x118>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	461a      	mov	r2, r3
 8000cac:	4936      	ldr	r1, [pc, #216]	; (8000d88 <PlayingPageInfo+0x11c>)
 8000cae:	4837      	ldr	r0, [pc, #220]	; (8000d8c <PlayingPageInfo+0x120>)
 8000cb0:	f003 fab8 	bl	8004224 <siprintf>
	PrintCentered("Carnibaru Score: ", 3, 20); // score on 3 digit average (actual len = 17)
 8000cb4:	2214      	movs	r2, #20
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	4835      	ldr	r0, [pc, #212]	; (8000d90 <PlayingPageInfo+0x124>)
 8000cba:	f000 fc47 	bl	800154c <PrintCentered>
	print(gameData.currentScoreString);
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <PlayingPageInfo+0x120>)
 8000cc0:	f7ff fd78 	bl	80007b4 <print>

	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8000cc8:	e048      	b.n	8000d5c <PlayingPageInfo+0xf0>
		char tempString[100] = "";
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2260      	movs	r2, #96	; 0x60
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 f98c 	bl	8003ff4 <memset>
		struct node * tempNode = gameData.lines[i]->tail;
 8000cdc:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <PlayingPageInfo+0x118>)
 8000cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
		while(tempNode != gameData.lines[i]->head) {
 8000ce8:	e016      	b.n	8000d18 <PlayingPageInfo+0xac>
			strcat(tempString, tempNode->data);
 8000cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fab6 	bl	8004264 <strcat>
			strcat(tempString, " ");
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa7a 	bl	80001f4 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	4922      	ldr	r1, [pc, #136]	; (8000d94 <PlayingPageInfo+0x128>)
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	8013      	strh	r3, [r2, #0]
			tempNode = tempNode->back;
 8000d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	66fb      	str	r3, [r7, #108]	; 0x6c
		while(tempNode != gameData.lines[i]->head) {
 8000d18:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <PlayingPageInfo+0x118>)
 8000d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d1e0      	bne.n	8000cea <PlayingPageInfo+0x7e>
		}
		char * outString = stringGetLastKBit(tempString, gameData.linesLength[i]);
 8000d28:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <PlayingPageInfo+0x118>)
 8000d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d2c:	330a      	adds	r3, #10
 8000d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fb68 	bl	800140c <stringGetLastKBit>
 8000d3c:	66b8      	str	r0, [r7, #104]	; 0x68
		MoveCurTo(5 + i, 3); print(">"); print(outString);
 8000d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d40:	3305      	adds	r3, #5
 8000d42:	2103      	movs	r1, #3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fb8f 	bl	8001468 <MoveCurTo>
 8000d4a:	4813      	ldr	r0, [pc, #76]	; (8000d98 <PlayingPageInfo+0x12c>)
 8000d4c:	f7ff fd32 	bl	80007b4 <print>
 8000d50:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000d52:	f7ff fd2f 	bl	80007b4 <print>
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d58:	3301      	adds	r3, #1
 8000d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <PlayingPageInfo+0x118>)
 8000d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dbb1      	blt.n	8000cca <PlayingPageInfo+0x5e>
	}
	DrawGrid();
 8000d66:	f000 fbbf 	bl	80014e8 <DrawGrid>
	MoveCurTo(5 + gameData.numberOfLines, 5);
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <PlayingPageInfo+0x118>)
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	3305      	adds	r3, #5
 8000d70:	2105      	movs	r1, #5
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fb78 	bl	8001468 <MoveCurTo>
}
 8000d78:	bf00      	nop
 8000d7a:	3778      	adds	r7, #120	; 0x78
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	08019634 	.word	0x08019634
 8000d84:	2000bce8 	.word	0x2000bce8
 8000d88:	08019638 	.word	0x08019638
 8000d8c:	2000bd4c 	.word	0x2000bd4c
 8000d90:	0801963c 	.word	0x0801963c
 8000d94:	08019650 	.word	0x08019650
 8000d98:	08019654 	.word	0x08019654

08000d9c <PlayingPageHandler>:

void PlayingPageHandler() {
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (unsigned char *)receive, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4927      	ldr	r1, [pc, #156]	; (8000e44 <PlayingPageHandler+0xa8>)
 8000da6:	4828      	ldr	r0, [pc, #160]	; (8000e48 <PlayingPageHandler+0xac>)
 8000da8:	f002 faec 	bl	8003384 <HAL_UART_Receive_IT>
	if(receive[0] != '\r') return;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <PlayingPageHandler+0xa8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b0d      	cmp	r3, #13
 8000db2:	d142      	bne.n	8000e3a <PlayingPageHandler+0x9e>
	receive[0] = 'X';
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <PlayingPageHandler+0xa8>)
 8000db6:	2258      	movs	r2, #88	; 0x58
 8000db8:	701a      	strb	r2, [r3, #0]
	int checkIfRemoved = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	e02c      	b.n	8000e1e <PlayingPageHandler+0x82>
		checkIfRemoved = searchAndRemove(gameData.lines[i], finishedLine);
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <PlayingPageHandler+0xb0>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	4920      	ldr	r1, [pc, #128]	; (8000e50 <PlayingPageHandler+0xb4>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd7a 	bl	80008c8 <searchAndRemove>
 8000dd4:	6038      	str	r0, [r7, #0]
		if(checkIfRemoved == 1){
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d11d      	bne.n	8000e18 <PlayingPageHandler+0x7c>
			gameData.linesLength[i] -= strlen(finishedLine);
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <PlayingPageHandler+0xb0>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	330a      	adds	r3, #10
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	461c      	mov	r4, r3
 8000de8:	4819      	ldr	r0, [pc, #100]	; (8000e50 <PlayingPageHandler+0xb4>)
 8000dea:	f7ff fa03 	bl	80001f4 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	1ae3      	subs	r3, r4, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <PlayingPageHandler+0xb0>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	330a      	adds	r3, #10
 8000dfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(gameData.linesLength[i] < 0) gameData.linesLength[i] = 0;
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <PlayingPageHandler+0xb0>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	330a      	adds	r3, #10
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da05      	bge.n	8000e18 <PlayingPageHandler+0x7c>
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <PlayingPageHandler+0xb0>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	330a      	adds	r3, #10
 8000e12:	2100      	movs	r1, #0
 8000e14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <PlayingPageHandler+0xb0>)
 8000e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbcd      	blt.n	8000dc4 <PlayingPageHandler+0x28>
		}
	}

	PlayingPageInfo();
 8000e28:	f7ff ff20 	bl	8000c6c <PlayingPageInfo>
	print(inputPrompt); print(line);
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <PlayingPageHandler+0xb8>)
 8000e2e:	f7ff fcc1 	bl	80007b4 <print>
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <PlayingPageHandler+0xbc>)
 8000e34:	f7ff fcbe 	bl	80007b4 <print>
 8000e38:	e000      	b.n	8000e3c <PlayingPageHandler+0xa0>
	if(receive[0] != '\r') return;
 8000e3a:	bf00      	nop

}
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20009408 	.word	0x20009408
 8000e48:	2000bdc8 	.word	0x2000bdc8
 8000e4c:	2000bce8 	.word	0x2000bce8
 8000e50:	20009504 	.word	0x20009504
 8000e54:	080198b8 	.word	0x080198b8
 8000e58:	200094a0 	.word	0x200094a0

08000e5c <PlayingPageTimerCallback>:

void PlayingPageTimerCallback() {
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
	if(gameData.gameState != 1) return;
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d142      	bne.n	8000ef0 <PlayingPageTimerCallback+0x94>
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	e031      	b.n	8000ed4 <PlayingPageTimerCallback+0x78>
		gameData.linesLength[i] += 1;
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	330a      	adds	r3, #10
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	491e      	ldr	r1, [pc, #120]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	330a      	adds	r3, #10
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(gameData.linesLength[i] > 61){
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	330a      	adds	r3, #10
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	2b3d      	cmp	r3, #61	; 0x3d
 8000e92:	dd05      	ble.n	8000ea0 <PlayingPageTimerCallback+0x44>
			gameData.gameState = 11; // DEAD
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000e96:	220b      	movs	r2, #11
 8000e98:	65da      	str	r2, [r3, #92]	; 0x5c
			DeadPageInit();
 8000e9a:	f000 f859 	bl	8000f50 <DeadPageInit>
			return;
 8000e9e:	e028      	b.n	8000ef2 <PlayingPageTimerCallback+0x96>
		}
		if(gameData.linesLength[i] > gameData.lines[i]->stringSize){
 8000ea0:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	330a      	adds	r3, #10
 8000ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eaa:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dd0a      	ble.n	8000ece <PlayingPageTimerCallback+0x72>
			append(gameData.lines[i], getRandWord());
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000ec0:	f7ff fda8 	bl	8000a14 <getRandWord>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f7ff fcc7 	bl	800085c <append>
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <PlayingPageTimerCallback+0x9c>)
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbc8      	blt.n	8000e70 <PlayingPageTimerCallback+0x14>
		}
	}
	PlayingPageInfo();
 8000ede:	f7ff fec5 	bl	8000c6c <PlayingPageInfo>
	print(inputPrompt); print(line);
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <PlayingPageTimerCallback+0xa0>)
 8000ee4:	f7ff fc66 	bl	80007b4 <print>
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <PlayingPageTimerCallback+0xa4>)
 8000eea:	f7ff fc63 	bl	80007b4 <print>
 8000eee:	e000      	b.n	8000ef2 <PlayingPageTimerCallback+0x96>
	if(gameData.gameState != 1) return;
 8000ef0:	bf00      	nop
}
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	2000bce8 	.word	0x2000bce8
 8000efc:	080198b8 	.word	0x080198b8
 8000f00:	200094a0 	.word	0x200094a0

08000f04 <StartPlayInit>:

void StartPlayInit() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	setRandSeed();
 8000f0a:	f7ff fd9d 	bl	8000a48 <setRandSeed>
	gameData.currentScore = 0;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <StartPlayInit+0x48>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	661a      	str	r2, [r3, #96]	; 0x60
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	e00f      	b.n	8000f3a <StartPlayInit+0x36>
		emptiedList(gameData.lines[i]);
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <StartPlayInit+0x48>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fd48 	bl	80009b8 <emptiedList>
		gameData.linesLength[i] = 0;
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <StartPlayInit+0x48>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	330a      	adds	r3, #10
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < gameData.numberOfLines; i++) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <StartPlayInit+0x48>)
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbea      	blt.n	8000f1a <StartPlayInit+0x16>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000bce8 	.word	0x2000bce8

08000f50 <DeadPageInit>:

void DeadPageInit() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09a      	sub	sp, #104	; 0x68
 8000f54:	af00      	add	r7, sp, #0
	int flag = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
	print(clearLine);
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <DeadPageInit+0x94>)
 8000f5c:	f7ff fc2a 	bl	80007b4 <print>
	PrintCentered("You Are Dead (ó﹏ò｡) \r\n\n", gameData.numberOfLines + 6, 19);
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <DeadPageInit+0x98>)
 8000f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f64:	3306      	adds	r3, #6
 8000f66:	2213      	movs	r2, #19
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <DeadPageInit+0x9c>)
 8000f6c:	f000 faee 	bl	800154c <PrintCentered>

	if(gameData.currentScore > gameData.highScore) {
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <DeadPageInit+0x98>)
 8000f72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <DeadPageInit+0x98>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd09      	ble.n	8000f90 <DeadPageInit+0x40>
		gameData.highScore = gameData.currentScore;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <DeadPageInit+0x98>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <DeadPageInit+0x98>)
 8000f82:	6593      	str	r3, [r2, #88]	; 0x58
		print("\tYou got a new HighScore!!\r\n");
 8000f84:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <DeadPageInit+0xa0>)
 8000f86:	f7ff fc15 	bl	80007b4 <print>
		flag = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f8e:	e00a      	b.n	8000fa6 <DeadPageInit+0x56>
	} else {
		char currentHighScore[40];
		sprintf(currentHighScore, "\tYour Current HighScore: %d\r\n", gameData.highScore);
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <DeadPageInit+0x98>)
 8000f92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f94:	463b      	mov	r3, r7
 8000f96:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <DeadPageInit+0xa4>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 f943 	bl	8004224 <siprintf>
		print(currentHighScore);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fc07 	bl	80007b4 <print>
	}
	char deadPrompt2[60];
	sprintf(deadPrompt2, "\tYour Score: %d\r\n\tEnter to go back to menu\r\n", gameData.currentScore);
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <DeadPageInit+0x98>)
 8000fa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fae:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <DeadPageInit+0xa8>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 f937 	bl	8004224 <siprintf>
	print(deadPrompt2);
 8000fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fbfa 	bl	80007b4 <print>
	if(flag == 1){
 8000fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <DeadPageInit+0x7a>
		WinningCat();
 8000fc6:	f7ff faf3 	bl	80005b0 <WinningCat>
	}
	DrawGrid();
 8000fca:	f000 fa8d 	bl	80014e8 <DrawGrid>
	MoveCurTo(gameData.numberOfLines + 11, 3);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <DeadPageInit+0x98>)
 8000fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd2:	330b      	adds	r3, #11
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fa46 	bl	8001468 <MoveCurTo>
}
 8000fdc:	bf00      	nop
 8000fde:	3768      	adds	r7, #104	; 0x68
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	080198b0 	.word	0x080198b0
 8000fe8:	2000bce8 	.word	0x2000bce8
 8000fec:	08019658 	.word	0x08019658
 8000ff0:	08019678 	.word	0x08019678
 8000ff4:	08019698 	.word	0x08019698
 8000ff8:	080196b8 	.word	0x080196b8

08000ffc <DeadPageHandler>:

void DeadPageHandler() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (unsigned char *)receive, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	490a      	ldr	r1, [pc, #40]	; (800102c <DeadPageHandler+0x30>)
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <DeadPageHandler+0x34>)
 8001006:	f002 f9bd 	bl	8003384 <HAL_UART_Receive_IT>
	if(receive[0] != '\r') return;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <DeadPageHandler+0x30>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b0d      	cmp	r3, #13
 8001010:	d10a      	bne.n	8001028 <DeadPageHandler+0x2c>
	receive[0] = 'X';
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <DeadPageHandler+0x30>)
 8001014:	2258      	movs	r2, #88	; 0x58
 8001016:	701a      	strb	r2, [r3, #0]
	gameData.gameState = 0;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <DeadPageHandler+0x38>)
 800101a:	2200      	movs	r2, #0
 800101c:	65da      	str	r2, [r3, #92]	; 0x5c
	Refresh();
 800101e:	f000 fa0f 	bl	8001440 <Refresh>
	WelcomePagePrompt();
 8001022:	f7ff fdab 	bl	8000b7c <WelcomePagePrompt>
 8001026:	e000      	b.n	800102a <DeadPageHandler+0x2e>
	if(receive[0] != '\r') return;
 8001028:	bf00      	nop
}
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20009408 	.word	0x20009408
 8001030:	2000bdc8 	.word	0x2000bdc8
 8001034:	2000bce8 	.word	0x2000bce8

08001038 <SettingPageInit>:

void SettingPageInit() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b090      	sub	sp, #64	; 0x40
 800103c:	af00      	add	r7, sp, #0
	Refresh();
 800103e:	f000 f9ff 	bl	8001440 <Refresh>
	DrawGrid();
 8001042:	f000 fa51 	bl	80014e8 <DrawGrid>
	char settingDiffPrompt[30], settingSpeedPrompt[30];
	PrintCentered("Setting Page", 3, -1);
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	2103      	movs	r1, #3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <SettingPageInit+0x80>)
 800104e:	f000 fa7d 	bl	800154c <PrintCentered>
	sprintf(settingDiffPrompt, "1) Difficulty Setting (%d)", gameData.numberOfLines);
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <SettingPageInit+0x84>)
 8001054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	4919      	ldr	r1, [pc, #100]	; (80010c0 <SettingPageInit+0x88>)
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f8e1 	bl	8004224 <siprintf>
	sprintf(settingSpeedPrompt, "2) Speed Setting (%d)", gameData.speed);
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <SettingPageInit+0x84>)
 8001064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001066:	463b      	mov	r3, r7
 8001068:	4916      	ldr	r1, [pc, #88]	; (80010c4 <SettingPageInit+0x8c>)
 800106a:	4618      	mov	r0, r3
 800106c:	f003 f8da 	bl	8004224 <siprintf>
	MoveCurTo(4, 5); print(settingDiffPrompt);
 8001070:	2105      	movs	r1, #5
 8001072:	2004      	movs	r0, #4
 8001074:	f000 f9f8 	bl	8001468 <MoveCurTo>
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fb99 	bl	80007b4 <print>
	MoveCurTo(5, 5); print(settingSpeedPrompt);
 8001082:	2105      	movs	r1, #5
 8001084:	2005      	movs	r0, #5
 8001086:	f000 f9ef 	bl	8001468 <MoveCurTo>
 800108a:	463b      	mov	r3, r7
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fb91 	bl	80007b4 <print>
	MoveCurTo(6, 5); print("0) Menu");
 8001092:	2105      	movs	r1, #5
 8001094:	2006      	movs	r0, #6
 8001096:	f000 f9e7 	bl	8001468 <MoveCurTo>
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <SettingPageInit+0x90>)
 800109c:	f7ff fb8a 	bl	80007b4 <print>
	MoveCurTo(7, 5); print(inputPrompt);
 80010a0:	2105      	movs	r1, #5
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 f9e0 	bl	8001468 <MoveCurTo>
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <SettingPageInit+0x94>)
 80010aa:	f7ff fb83 	bl	80007b4 <print>
}
 80010ae:	bf00      	nop
 80010b0:	3740      	adds	r7, #64	; 0x40
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	080196e8 	.word	0x080196e8
 80010bc:	2000bce8 	.word	0x2000bce8
 80010c0:	080196f8 	.word	0x080196f8
 80010c4:	08019714 	.word	0x08019714
 80010c8:	0801972c 	.word	0x0801972c
 80010cc:	080198b8 	.word	0x080198b8

080010d0 <SettingPageHandler>:

void SettingPageHandler() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (unsigned char *)receive, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	4921      	ldr	r1, [pc, #132]	; (800115c <SettingPageHandler+0x8c>)
 80010d8:	4821      	ldr	r0, [pc, #132]	; (8001160 <SettingPageHandler+0x90>)
 80010da:	f002 f953 	bl	8003384 <HAL_UART_Receive_IT>
	if(receive[0] != '\r') return;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <SettingPageHandler+0x8c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b0d      	cmp	r3, #13
 80010e4:	d137      	bne.n	8001156 <SettingPageHandler+0x86>
	receive[0] = 'X';
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <SettingPageHandler+0x8c>)
 80010e8:	2258      	movs	r2, #88	; 0x58
 80010ea:	701a      	strb	r2, [r3, #0]
	if(strcmp(finishedLine, "1") == 0) {
 80010ec:	491d      	ldr	r1, [pc, #116]	; (8001164 <SettingPageHandler+0x94>)
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <SettingPageHandler+0x98>)
 80010f0:	f7ff f876 	bl	80001e0 <strcmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <SettingPageHandler+0x36>
		SettingDifficultyInit();
 80010fa:	f000 f83f 	bl	800117c <SettingDifficultyInit>
		gameData.gameState = 21;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <SettingPageHandler+0x9c>)
 8001100:	2215      	movs	r2, #21
 8001102:	65da      	str	r2, [r3, #92]	; 0x5c
		return;
 8001104:	e028      	b.n	8001158 <SettingPageHandler+0x88>
	}
	if(strcmp(finishedLine, "2") == 0) {
 8001106:	491a      	ldr	r1, [pc, #104]	; (8001170 <SettingPageHandler+0xa0>)
 8001108:	4817      	ldr	r0, [pc, #92]	; (8001168 <SettingPageHandler+0x98>)
 800110a:	f7ff f869 	bl	80001e0 <strcmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d105      	bne.n	8001120 <SettingPageHandler+0x50>
		SettingSpeedInit();
 8001114:	f000 f8c4 	bl	80012a0 <SettingSpeedInit>
		gameData.gameState = 22;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <SettingPageHandler+0x9c>)
 800111a:	2216      	movs	r2, #22
 800111c:	65da      	str	r2, [r3, #92]	; 0x5c
		return;
 800111e:	e01b      	b.n	8001158 <SettingPageHandler+0x88>
	}
	if(strcmp(finishedLine, "0") == 0) {
 8001120:	4914      	ldr	r1, [pc, #80]	; (8001174 <SettingPageHandler+0xa4>)
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <SettingPageHandler+0x98>)
 8001124:	f7ff f85c 	bl	80001e0 <strcmp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <SettingPageHandler+0x6e>
		Refresh();
 800112e:	f000 f987 	bl	8001440 <Refresh>
		WelcomePagePrompt();
 8001132:	f7ff fd23 	bl	8000b7c <WelcomePagePrompt>
		gameData.gameState = 0;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <SettingPageHandler+0x9c>)
 8001138:	2200      	movs	r2, #0
 800113a:	65da      	str	r2, [r3, #92]	; 0x5c
		return;
 800113c:	e00c      	b.n	8001158 <SettingPageHandler+0x88>
	}
	ClearLine();
 800113e:	f000 f989 	bl	8001454 <ClearLine>
	DrawGrid();
 8001142:	f000 f9d1 	bl	80014e8 <DrawGrid>
	MoveCurTo(7, 5); print(inputPrompt);
 8001146:	2105      	movs	r1, #5
 8001148:	2007      	movs	r0, #7
 800114a:	f000 f98d 	bl	8001468 <MoveCurTo>
 800114e:	480a      	ldr	r0, [pc, #40]	; (8001178 <SettingPageHandler+0xa8>)
 8001150:	f7ff fb30 	bl	80007b4 <print>
 8001154:	e000      	b.n	8001158 <SettingPageHandler+0x88>
	if(receive[0] != '\r') return;
 8001156:	bf00      	nop
}
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20009408 	.word	0x20009408
 8001160:	2000bdc8 	.word	0x2000bdc8
 8001164:	0801962c 	.word	0x0801962c
 8001168:	20009504 	.word	0x20009504
 800116c:	2000bce8 	.word	0x2000bce8
 8001170:	08019630 	.word	0x08019630
 8001174:	08019734 	.word	0x08019734
 8001178:	080198b8 	.word	0x080198b8

0800117c <SettingDifficultyInit>:

void SettingDifficultyInit() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
	Refresh();
 8001182:	f000 f95d 	bl	8001440 <Refresh>
	DrawGrid();
 8001186:	f000 f9af 	bl	80014e8 <DrawGrid>
	PrintCentered("Difficulty Setting", 3, -1);
 800118a:	f04f 32ff 	mov.w	r2, #4294967295
 800118e:	2103      	movs	r1, #3
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <SettingDifficultyInit+0x5c>)
 8001192:	f000 f9db 	bl	800154c <PrintCentered>
	char difficultyPrompt[50];
	sprintf(difficultyPrompt, "Current Difficulty: %d (1 - 10 Lines)", gameData.numberOfLines);
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <SettingDifficultyInit+0x60>)
 8001198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4910      	ldr	r1, [pc, #64]	; (80011e0 <SettingDifficultyInit+0x64>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 f840 	bl	8004224 <siprintf>
	MoveCurTo(4, 5); print(difficultyPrompt);
 80011a4:	2105      	movs	r1, #5
 80011a6:	2004      	movs	r0, #4
 80011a8:	f000 f95e 	bl	8001468 <MoveCurTo>
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fb00 	bl	80007b4 <print>
	MoveCurTo(5, 5); print("0) Back");
 80011b4:	2105      	movs	r1, #5
 80011b6:	2005      	movs	r0, #5
 80011b8:	f000 f956 	bl	8001468 <MoveCurTo>
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <SettingDifficultyInit+0x68>)
 80011be:	f7ff faf9 	bl	80007b4 <print>
	MoveCurTo(6, 5); print(inputPrompt);
 80011c2:	2105      	movs	r1, #5
 80011c4:	2006      	movs	r0, #6
 80011c6:	f000 f94f 	bl	8001468 <MoveCurTo>
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <SettingDifficultyInit+0x6c>)
 80011cc:	f7ff faf2 	bl	80007b4 <print>
}
 80011d0:	bf00      	nop
 80011d2:	3738      	adds	r7, #56	; 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08019738 	.word	0x08019738
 80011dc:	2000bce8 	.word	0x2000bce8
 80011e0:	0801974c 	.word	0x0801974c
 80011e4:	08019774 	.word	0x08019774
 80011e8:	080198b8 	.word	0x080198b8

080011ec <SettingDifficultyHandler>:

void SettingDifficultyHandler() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (unsigned char *)receive, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	4924      	ldr	r1, [pc, #144]	; (8001284 <SettingDifficultyHandler+0x98>)
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <SettingDifficultyHandler+0x9c>)
 80011f6:	f002 f8c5 	bl	8003384 <HAL_UART_Receive_IT>
	if(receive[0] != '\r') return;
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <SettingDifficultyHandler+0x98>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d13e      	bne.n	8001280 <SettingDifficultyHandler+0x94>
	receive[0] = 'X';
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <SettingDifficultyHandler+0x98>)
 8001204:	2258      	movs	r2, #88	; 0x58
 8001206:	701a      	strb	r2, [r3, #0]
	if(strcmp(finishedLine, "10") == 0){
 8001208:	4920      	ldr	r1, [pc, #128]	; (800128c <SettingDifficultyHandler+0xa0>)
 800120a:	4821      	ldr	r0, [pc, #132]	; (8001290 <SettingDifficultyHandler+0xa4>)
 800120c:	f7fe ffe8 	bl	80001e0 <strcmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <SettingDifficultyHandler+0x36>
		gameData.numberOfLines = 10;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <SettingDifficultyHandler+0xa8>)
 8001218:	220a      	movs	r2, #10
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
		SettingDifficultyInit();
 800121c:	f7ff ffae 	bl	800117c <SettingDifficultyInit>
		return;
 8001220:	e02f      	b.n	8001282 <SettingDifficultyHandler+0x96>
	}
	if('1' <= finishedLine[0] && finishedLine[0] <= '9' && strlen(finishedLine) == 1) {
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <SettingDifficultyHandler+0xa4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b30      	cmp	r3, #48	; 0x30
 8001228:	d911      	bls.n	800124e <SettingDifficultyHandler+0x62>
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <SettingDifficultyHandler+0xa4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b39      	cmp	r3, #57	; 0x39
 8001230:	d80d      	bhi.n	800124e <SettingDifficultyHandler+0x62>
 8001232:	4817      	ldr	r0, [pc, #92]	; (8001290 <SettingDifficultyHandler+0xa4>)
 8001234:	f7fe ffde 	bl	80001f4 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <SettingDifficultyHandler+0x62>
		gameData.numberOfLines = finishedLine[0] - '0';
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <SettingDifficultyHandler+0xa4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3b30      	subs	r3, #48	; 0x30
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <SettingDifficultyHandler+0xa8>)
 8001246:	6553      	str	r3, [r2, #84]	; 0x54
		SettingDifficultyInit();
 8001248:	f7ff ff98 	bl	800117c <SettingDifficultyInit>
		return;
 800124c:	e019      	b.n	8001282 <SettingDifficultyHandler+0x96>
	}
	if(strcmp(finishedLine, "0") == 0){
 800124e:	4912      	ldr	r1, [pc, #72]	; (8001298 <SettingDifficultyHandler+0xac>)
 8001250:	480f      	ldr	r0, [pc, #60]	; (8001290 <SettingDifficultyHandler+0xa4>)
 8001252:	f7fe ffc5 	bl	80001e0 <strcmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <SettingDifficultyHandler+0x7c>
		gameData.gameState = 2;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <SettingDifficultyHandler+0xa8>)
 800125e:	2202      	movs	r2, #2
 8001260:	65da      	str	r2, [r3, #92]	; 0x5c
		SettingPageInit();
 8001262:	f7ff fee9 	bl	8001038 <SettingPageInit>
		return;
 8001266:	e00c      	b.n	8001282 <SettingDifficultyHandler+0x96>
	}
	ClearLine();
 8001268:	f000 f8f4 	bl	8001454 <ClearLine>
	DrawGrid();
 800126c:	f000 f93c 	bl	80014e8 <DrawGrid>
	MoveCurTo(6, 5); print(inputPrompt);
 8001270:	2105      	movs	r1, #5
 8001272:	2006      	movs	r0, #6
 8001274:	f000 f8f8 	bl	8001468 <MoveCurTo>
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <SettingDifficultyHandler+0xb0>)
 800127a:	f7ff fa9b 	bl	80007b4 <print>
 800127e:	e000      	b.n	8001282 <SettingDifficultyHandler+0x96>
	if(receive[0] != '\r') return;
 8001280:	bf00      	nop
}
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20009408 	.word	0x20009408
 8001288:	2000bdc8 	.word	0x2000bdc8
 800128c:	0801977c 	.word	0x0801977c
 8001290:	20009504 	.word	0x20009504
 8001294:	2000bce8 	.word	0x2000bce8
 8001298:	08019734 	.word	0x08019734
 800129c:	080198b8 	.word	0x080198b8

080012a0 <SettingSpeedInit>:

void SettingSpeedInit() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b092      	sub	sp, #72	; 0x48
 80012a4:	af00      	add	r7, sp, #0
	Refresh();
 80012a6:	f000 f8cb 	bl	8001440 <Refresh>
	DrawGrid();
 80012aa:	f000 f91d 	bl	80014e8 <DrawGrid>
	PrintCentered("Speed Setting", 3, -1);
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	2103      	movs	r1, #3
 80012b4:	4811      	ldr	r0, [pc, #68]	; (80012fc <SettingSpeedInit+0x5c>)
 80012b6:	f000 f949 	bl	800154c <PrintCentered>
	char speedPrompt[70];
	sprintf(speedPrompt, "Current Speed: %d (1 - 10 Letter per Second per Line)", gameData.speed);
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <SettingSpeedInit+0x60>)
 80012bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012be:	463b      	mov	r3, r7
 80012c0:	4910      	ldr	r1, [pc, #64]	; (8001304 <SettingSpeedInit+0x64>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 ffae 	bl	8004224 <siprintf>
	MoveCurTo(4, 5); print(speedPrompt);
 80012c8:	2105      	movs	r1, #5
 80012ca:	2004      	movs	r0, #4
 80012cc:	f000 f8cc 	bl	8001468 <MoveCurTo>
 80012d0:	463b      	mov	r3, r7
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fa6e 	bl	80007b4 <print>
	MoveCurTo(5, 5); print("0) Back");
 80012d8:	2105      	movs	r1, #5
 80012da:	2005      	movs	r0, #5
 80012dc:	f000 f8c4 	bl	8001468 <MoveCurTo>
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <SettingSpeedInit+0x68>)
 80012e2:	f7ff fa67 	bl	80007b4 <print>
	MoveCurTo(6, 5); print(inputPrompt);
 80012e6:	2105      	movs	r1, #5
 80012e8:	2006      	movs	r0, #6
 80012ea:	f000 f8bd 	bl	8001468 <MoveCurTo>
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <SettingSpeedInit+0x6c>)
 80012f0:	f7ff fa60 	bl	80007b4 <print>
}
 80012f4:	bf00      	nop
 80012f6:	3748      	adds	r7, #72	; 0x48
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	08019780 	.word	0x08019780
 8001300:	2000bce8 	.word	0x2000bce8
 8001304:	08019790 	.word	0x08019790
 8001308:	08019774 	.word	0x08019774
 800130c:	080198b8 	.word	0x080198b8

08001310 <SettingSpeedHandler>:

void SettingSpeedHandler() {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (unsigned char *)receive, 1);
 8001314:	2201      	movs	r2, #1
 8001316:	4926      	ldr	r1, [pc, #152]	; (80013b0 <SettingSpeedHandler+0xa0>)
 8001318:	4826      	ldr	r0, [pc, #152]	; (80013b4 <SettingSpeedHandler+0xa4>)
 800131a:	f002 f833 	bl	8003384 <HAL_UART_Receive_IT>
	if(receive[0] != '\r') return;
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <SettingSpeedHandler+0xa0>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b0d      	cmp	r3, #13
 8001324:	d142      	bne.n	80013ac <SettingSpeedHandler+0x9c>
	receive[0] = 'X';
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <SettingSpeedHandler+0xa0>)
 8001328:	2258      	movs	r2, #88	; 0x58
 800132a:	701a      	strb	r2, [r3, #0]
	if(strcmp(finishedLine, "10") == 0){
 800132c:	4922      	ldr	r1, [pc, #136]	; (80013b8 <SettingSpeedHandler+0xa8>)
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <SettingSpeedHandler+0xac>)
 8001330:	f7fe ff56 	bl	80001e0 <strcmp>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <SettingSpeedHandler+0x3a>
		gameData.speed = 10;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <SettingSpeedHandler+0xb0>)
 800133c:	220a      	movs	r2, #10
 800133e:	651a      	str	r2, [r3, #80]	; 0x50
		ChangeTimerPeriod();
 8001340:	f000 f844 	bl	80013cc <ChangeTimerPeriod>
		SettingSpeedInit();
 8001344:	f7ff ffac 	bl	80012a0 <SettingSpeedInit>
		return;
 8001348:	e031      	b.n	80013ae <SettingSpeedHandler+0x9e>
	}
	if(49 <= finishedLine[0] && finishedLine[0] <= 57 && strlen(finishedLine) == 1) {
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <SettingSpeedHandler+0xac>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b30      	cmp	r3, #48	; 0x30
 8001350:	d913      	bls.n	800137a <SettingSpeedHandler+0x6a>
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <SettingSpeedHandler+0xac>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b39      	cmp	r3, #57	; 0x39
 8001358:	d80f      	bhi.n	800137a <SettingSpeedHandler+0x6a>
 800135a:	4818      	ldr	r0, [pc, #96]	; (80013bc <SettingSpeedHandler+0xac>)
 800135c:	f7fe ff4a 	bl	80001f4 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d109      	bne.n	800137a <SettingSpeedHandler+0x6a>
		gameData.speed = finishedLine[0] - '0';
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <SettingSpeedHandler+0xac>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	3b30      	subs	r3, #48	; 0x30
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <SettingSpeedHandler+0xb0>)
 800136e:	6513      	str	r3, [r2, #80]	; 0x50
		ChangeTimerPeriod();
 8001370:	f000 f82c 	bl	80013cc <ChangeTimerPeriod>
		SettingSpeedInit();
 8001374:	f7ff ff94 	bl	80012a0 <SettingSpeedInit>
		return;
 8001378:	e019      	b.n	80013ae <SettingSpeedHandler+0x9e>
	}
	if(strcmp(finishedLine, "0") == 0) {
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <SettingSpeedHandler+0xb4>)
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <SettingSpeedHandler+0xac>)
 800137e:	f7fe ff2f 	bl	80001e0 <strcmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <SettingSpeedHandler+0x84>
		gameData.gameState = 2;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <SettingSpeedHandler+0xb0>)
 800138a:	2202      	movs	r2, #2
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c
		SettingPageInit();
 800138e:	f7ff fe53 	bl	8001038 <SettingPageInit>
		return;
 8001392:	e00c      	b.n	80013ae <SettingSpeedHandler+0x9e>
	}
	ClearLine();
 8001394:	f000 f85e 	bl	8001454 <ClearLine>
	DrawGrid();
 8001398:	f000 f8a6 	bl	80014e8 <DrawGrid>
	MoveCurTo(6, 5); print(inputPrompt);
 800139c:	2105      	movs	r1, #5
 800139e:	2006      	movs	r0, #6
 80013a0:	f000 f862 	bl	8001468 <MoveCurTo>
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <SettingSpeedHandler+0xb8>)
 80013a6:	f7ff fa05 	bl	80007b4 <print>
 80013aa:	e000      	b.n	80013ae <SettingSpeedHandler+0x9e>
	if(receive[0] != '\r') return;
 80013ac:	bf00      	nop
}
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20009408 	.word	0x20009408
 80013b4:	2000bdc8 	.word	0x2000bdc8
 80013b8:	0801977c 	.word	0x0801977c
 80013bc:	20009504 	.word	0x20009504
 80013c0:	2000bce8 	.word	0x2000bce8
 80013c4:	08019734 	.word	0x08019734
 80013c8:	080198b8 	.word	0x080198b8

080013cc <ChangeTimerPeriod>:

void ChangeTimerPeriod(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <ChangeTimerPeriod+0x34>)
 80013d2:	f001 fb8c 	bl	8002aee <HAL_TIM_Base_Stop_IT>
    TIM2->ARR = 11000 - (gameData.speed * 1000) - 1;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <ChangeTimerPeriod+0x38>)
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <ChangeTimerPeriod+0x3c>)
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80013e4:	3337      	adds	r3, #55	; 0x37
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->CNT = 0;
 80013ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <ChangeTimerPeriod+0x34>)
 80013f6:	f001 fb56 	bl	8002aa6 <HAL_TIM_Base_Start_IT>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000bd88 	.word	0x2000bd88
 8001404:	2000bce8 	.word	0x2000bce8
 8001408:	fffffc18 	.word	0xfffffc18

0800140c <stringGetLastKBit>:

char * stringGetLastKBit(char * s, int k){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	int len = strlen(s);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7fe feec 	bl	80001f4 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	60fb      	str	r3, [r7, #12]
	if(len <= k) return s;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	dc01      	bgt.n	800142c <stringGetLastKBit+0x20>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	e004      	b.n	8001436 <stringGetLastKBit+0x2a>
	return s + len - k;
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <Refresh>:

void Refresh() {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	print(clearAndMoveCurTopLeft);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <Refresh+0x10>)
 8001446:	f7ff f9b5 	bl	80007b4 <print>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	080198a0 	.word	0x080198a0

08001454 <ClearLine>:

void ClearLine() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	print(clearLine);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <ClearLine+0x10>)
 800145a:	f7ff f9ab 	bl	80007b4 <print>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	080198b0 	.word	0x080198b0

08001468 <MoveCurTo>:

void MoveCurTo(int row, int col) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	char position[20];
	sprintf(position, "\033[%d;%dH", row, col);
 8001472:	f107 000c 	add.w	r0, r7, #12
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4906      	ldr	r1, [pc, #24]	; (8001494 <MoveCurTo+0x2c>)
 800147c:	f002 fed2 	bl	8004224 <siprintf>
	print(position);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f995 	bl	80007b4 <print>
}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	080197c8 	.word	0x080197c8

08001498 <SetColorBrightRedBG_BlackLetter>:

void SetColorBrightRedAll() {
	print("\033[91;101m");
}

void SetColorBrightRedBG_BlackLetter() {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	print("\033[30;101m");
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <SetColorBrightRedBG_BlackLetter+0x10>)
 800149e:	f7ff f989 	bl	80007b4 <print>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	080197e0 	.word	0x080197e0

080014ac <SetColorResetWithBold>:

void SetColorResetWithBold() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	print("\033[0m\033[1m"); //WithBold
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <SetColorResetWithBold+0x10>)
 80014b2:	f7ff f97f 	bl	80007b4 <print>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	080197ec 	.word	0x080197ec

080014c0 <SetColorBrightCyanAll>:

void SetColorBrightCyanAll() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	print("\033[96;106m");
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <SetColorBrightCyanAll+0x10>)
 80014c6:	f7ff f975 	bl	80007b4 <print>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	080197f8 	.word	0x080197f8

080014d4 <SetFontBold>:

void SetFontBold() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	print("\033[1m");
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <SetFontBold+0x10>)
 80014da:	f7ff f96b 	bl	80007b4 <print>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08019588 	.word	0x08019588

080014e8 <DrawGrid>:

void DrawGrid() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
	MoveCurTo(1, 1);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff ffb9 	bl	8001468 <MoveCurTo>
	SetColorBrightCyanAll();
 80014f6:	f7ff ffe3 	bl	80014c0 <SetColorBrightCyanAll>
	print("1234567890123456789012345678901234567890123456789012345678901234567\r\n"); // 67
 80014fa:	4811      	ldr	r0, [pc, #68]	; (8001540 <DrawGrid+0x58>)
 80014fc:	f7ff f95a 	bl	80007b4 <print>
	for(int i = 2; i < 23; i++) {
 8001500:	2302      	movs	r3, #2
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00c      	b.n	8001520 <DrawGrid+0x38>
		char toPrint[20];
		sprintf(toPrint, "OO\033[%d;66HOO\r\n", i);
 8001506:	463b      	mov	r3, r7
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	490e      	ldr	r1, [pc, #56]	; (8001544 <DrawGrid+0x5c>)
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fe89 	bl	8004224 <siprintf>
		print(toPrint);
 8001512:	463b      	mov	r3, r7
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f94d 	bl	80007b4 <print>
	for(int i = 2; i < 23; i++) {
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b16      	cmp	r3, #22
 8001524:	ddef      	ble.n	8001506 <DrawGrid+0x1e>
	}
	print("1234567890123456789012345678901234567890123456789012345678901234567"); // 67
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <DrawGrid+0x60>)
 8001528:	f7ff f944 	bl	80007b4 <print>
	MoveCurTo(2, 3);
 800152c:	2103      	movs	r1, #3
 800152e:	2002      	movs	r0, #2
 8001530:	f7ff ff9a 	bl	8001468 <MoveCurTo>
	SetColorResetWithBold();
 8001534:	f7ff ffba 	bl	80014ac <SetColorResetWithBold>
}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08019804 	.word	0x08019804
 8001544:	0801984c 	.word	0x0801984c
 8001548:	0801985c 	.word	0x0801985c

0800154c <PrintCentered>:

void PrintCentered(const void * s, int row, int len) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	if(len == -1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d104      	bne.n	800156a <PrintCentered+0x1e>
		len = strlen(s);
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7fe fe47 	bl	80001f4 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	607b      	str	r3, [r7, #4]
	int col = 34 - (len / 2);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0fda      	lsrs	r2, r3, #31
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	3322      	adds	r3, #34	; 0x22
 8001576:	617b      	str	r3, [r7, #20]
	MoveCurTo(row, col);
 8001578:	6979      	ldr	r1, [r7, #20]
 800157a:	68b8      	ldr	r0, [r7, #8]
 800157c:	f7ff ff74 	bl	8001468 <MoveCurTo>
	print(s);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff f917 	bl	80007b4 <print>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f000 fab8 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f810 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 f8ee 	bl	800177c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015a0:	f000 f8c2 	bl	8001728 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015a4:	f000 f872 	bl	800168c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <main+0x28>)
 80015aa:	f001 fa7c 	bl	8002aa6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 80015ae:	f7ff f835 	bl	800061c <init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  driver();
 80015b2:	f7ff f867 	bl	8000684 <driver>
 80015b6:	e7fc      	b.n	80015b2 <main+0x22>
 80015b8:	2000bd88 	.word	0x2000bd88

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fd12 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <SystemClock_Config+0xc8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <SystemClock_Config+0xc8>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <SystemClock_Config+0xc8>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <SystemClock_Config+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <SystemClock_Config+0xcc>)
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <SystemClock_Config+0xcc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800162c:	2308      	movs	r3, #8
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001630:	2364      	movs	r3, #100	; 0x64
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fda3 	bl	800218c <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800164c:	f000 f912 	bl	8001874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2103      	movs	r1, #3
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fffd 	bl	800266c <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001678:	f000 f8fc 	bl	8001874 <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3750      	adds	r7, #80	; 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_TIM2_Init+0x98>)
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_TIM2_Init+0x98>)
 80016b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80016b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_TIM2_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_TIM2_Init+0x98>)
 80016c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80016c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_TIM2_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_TIM2_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d2:	4814      	ldr	r0, [pc, #80]	; (8001724 <MX_TIM2_Init+0x98>)
 80016d4:	f001 f9bc 	bl	8002a50 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016de:	f000 f8c9 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_TIM2_Init+0x98>)
 80016f0:	f001 fb30 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016fa:	f000 f8bb 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM2_Init+0x98>)
 800170c:	f001 fd26 	bl	800315c <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001716:	f000 f8ad 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000bd88 	.word	0x2000bd88

08001728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_USART2_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001734:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USART2_UART_Init+0x4c>)
 8001760:	f001 fd7e 	bl	8003260 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 f883 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000bdc8 	.word	0x2000bdc8
 8001778:	40004400 	.word	0x40004400

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <MX_GPIO_Init+0xd0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a2c      	ldr	r2, [pc, #176]	; (800184c <MX_GPIO_Init+0xd0>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <MX_GPIO_Init+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <MX_GPIO_Init+0xd0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <MX_GPIO_Init+0xd0>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <MX_GPIO_Init+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_GPIO_Init+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <MX_GPIO_Init+0xd0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_GPIO_Init+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <MX_GPIO_Init+0xd0>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2120      	movs	r1, #32
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <MX_GPIO_Init+0xd4>)
 8001808:	f000 fca6 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <MX_GPIO_Init+0xd8>)
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_GPIO_Init+0xdc>)
 8001822:	f000 fb17 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001826:	2320      	movs	r3, #32
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_GPIO_Init+0xd4>)
 800183e:	f000 fb09 	bl	8001e54 <HAL_GPIO_Init>

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	10210000 	.word	0x10210000
 8001858:	40020800 	.word	0x40020800

0800185c <TIM2_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	PlayingPageTimerCallback();
 8001860:	f7ff fafc 	bl	8000e5c <PlayingPageTimerCallback>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM2_IRQHandler+0x14>)
 8001866:	f001 f96d 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000bd88 	.word	0x2000bd88

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_MspInit+0x4c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_MspInit+0x4c>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_MspInit+0x4c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c2:	2007      	movs	r0, #7
 80018c4:	f000 fa62 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e4:	d115      	bne.n	8001912 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_TIM_Base_MspInit+0x48>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_TIM_Base_MspInit+0x48>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_TIM_Base_MspInit+0x48>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201c      	movs	r0, #28
 8001908:	f000 fa4b 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800190c:	201c      	movs	r0, #28
 800190e:	f000 fa64 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_UART_MspInit+0x94>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d133      	bne.n	80019aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x98>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0x98>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_UART_MspInit+0x9c>)
 8001996:	f000 fa5d 	bl	8001e54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2026      	movs	r0, #38	; 0x26
 80019a0:	f000 f9ff 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a4:	2026      	movs	r0, #38	; 0x26
 80019a6:	f000 fa18 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f8ca 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <USART2_IRQHandler+0x10>)
 8001a22:	f001 fd05 	bl	8003430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000bdc8 	.word	0x2000bdc8

08001a30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x50>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x16>
		heap_end = &end;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <_sbrk+0x50>)
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <_sbrk+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <_sbrk+0x50>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <_sbrk+0x50>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	466a      	mov	r2, sp
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d907      	bls.n	8001a6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a5a:	f002 fa91 	bl	8003f80 <__errno>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	230c      	movs	r3, #12
 8001a62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	e006      	b.n	8001a78 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <_sbrk+0x50>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <_sbrk+0x50>)
 8001a74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20009568 	.word	0x20009568
 8001a84:	2000be18 	.word	0x2000be18

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <SystemInit+0x28>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <SystemInit+0x28>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SystemInit+0x28>)
 8001a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ab8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aba:	e003      	b.n	8001ac4 <LoopCopyDataInit>

08001abc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001abe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ac0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ac2:	3104      	adds	r1, #4

08001ac4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ac8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001acc:	d3f6      	bcc.n	8001abc <CopyDataInit>
  ldr  r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ad0:	e002      	b.n	8001ad8 <LoopFillZerobss>

08001ad2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ad2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ad4:	f842 3b04 	str.w	r3, [r2], #4

08001ad8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ada:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001adc:	d3f9      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ade:	f7ff ffd3 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f002 fa53 	bl	8003f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fd53 	bl	8001590 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001af0:	0801994c 	.word	0x0801994c
  ldr  r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001af8:	2000947c 	.word	0x2000947c
  ldr  r2, =_sbss
 8001afc:	2000947c 	.word	0x2000947c
  ldr  r3, = _ebss
 8001b00:	2000be14 	.word	0x2000be14

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f92b 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fea2 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f943 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f000 f90b 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000940c 	.word	0x2000940c
 8001ba4:	20009414 	.word	0x20009414
 8001ba8:	20009410 	.word	0x20009410

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20009414 	.word	0x20009414
 8001bd0:	2000be0c 	.word	0x2000be0c

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000be0c 	.word	0x2000be0c

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff3e 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff31 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d004      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e00c      	b.n	8001e46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2205      	movs	r2, #5
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e159      	b.n	8002124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8148 	bne.w	800211e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d00b      	beq.n	8001eae <HAL_GPIO_Init+0x5a>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea2:	2b11      	cmp	r3, #17
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d130      	bne.n	8001f10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 0201 	and.w	r2, r3, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0xfc>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a2 	beq.w	800211e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <HAL_GPIO_Init+0x2e4>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a55      	ldr	r2, [pc, #340]	; (8002138 <HAL_GPIO_Init+0x2e4>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_GPIO_Init+0x2e4>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff6:	4a51      	ldr	r2, [pc, #324]	; (800213c <HAL_GPIO_Init+0x2e8>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_GPIO_Init+0x2ec>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d019      	beq.n	8002056 <HAL_GPIO_Init+0x202>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a47      	ldr	r2, [pc, #284]	; (8002144 <HAL_GPIO_Init+0x2f0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0x1fe>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a46      	ldr	r2, [pc, #280]	; (8002148 <HAL_GPIO_Init+0x2f4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x1fa>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a45      	ldr	r2, [pc, #276]	; (800214c <HAL_GPIO_Init+0x2f8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x1f6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a44      	ldr	r2, [pc, #272]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x1f2>
 8002042:	2304      	movs	r3, #4
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x204>
 8002046:	2307      	movs	r3, #7
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x204>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x204>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x204>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x204>
 8002056:	2300      	movs	r3, #0
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002068:	4934      	ldr	r1, [pc, #208]	; (800213c <HAL_GPIO_Init+0x2e8>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_GPIO_Init+0x300>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209a:	4a2e      	ldr	r2, [pc, #184]	; (8002154 <HAL_GPIO_Init+0x300>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_GPIO_Init+0x300>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_GPIO_Init+0x300>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f67f aea2 	bls.w	8001e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	3724      	adds	r7, #36	; 0x24
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40023800 	.word	0x40023800
 800213c:	40013800 	.word	0x40013800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40013c00 	.word	0x40013c00

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002174:	e003      	b.n	800217e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002176:	887b      	ldrh	r3, [r7, #2]
 8002178:	041a      	lsls	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	619a      	str	r2, [r3, #24]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e25b      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d075      	beq.n	8002296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021aa:	4ba3      	ldr	r3, [pc, #652]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d112      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b9d      	ldr	r3, [pc, #628]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x108>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d157      	bne.n	8002294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e236      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x74>
 80021f2:	4b91      	ldr	r3, [pc, #580]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a90      	ldr	r2, [pc, #576]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002224:	4b84      	ldr	r3, [pc, #528]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a83      	ldr	r2, [pc, #524]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a80      	ldr	r2, [pc, #512]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fcc6 	bl	8001bd4 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fcc2 	bl	8001bd4 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1fb      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xc0>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fcb2 	bl	8001bd4 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fcae 	bl	8001bd4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1e7      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b6c      	ldr	r3, [pc, #432]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0xe8>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d11c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1bb      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b56      	ldr	r3, [pc, #344]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4952      	ldr	r1, [pc, #328]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	e03a      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b4f      	ldr	r3, [pc, #316]	; (800243c <HAL_RCC_OscConfig+0x2b0>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7ff fc67 	bl	8001bd4 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fc63 	bl	8001bd4 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e19c      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4940      	ldr	r1, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_OscConfig+0x2b0>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7ff fc46 	bl	8001bd4 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234c:	f7ff fc42 	bl	8001bd4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e17b      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d030      	beq.n	80023d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_OscConfig+0x2b4>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7ff fc26 	bl	8001bd4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fc22 	bl	8001bd4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e15b      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x200>
 80023aa:	e015      	b.n	80023d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_OscConfig+0x2b4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff fc0f 	bl	8001bd4 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ba:	f7ff fc0b 	bl	8001bd4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e144      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a0 	beq.w	8002526 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x2b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d121      	bne.n	8002466 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCC_OscConfig+0x2b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_RCC_OscConfig+0x2b8>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7ff fbd1 	bl	8001bd4 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e011      	b.n	800245a <HAL_RCC_OscConfig+0x2ce>
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	42470000 	.word	0x42470000
 8002440:	42470e80 	.word	0x42470e80
 8002444:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7ff fbc4 	bl	8001bd4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0fd      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x4d4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x2f0>
 800246e:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x32a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x312>
 8002484:	4b77      	ldr	r3, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a76      	ldr	r2, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	4b74      	ldr	r3, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a73      	ldr	r2, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x32a>
 800249e:	4b71      	ldr	r3, [pc, #452]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a70      	ldr	r2, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	4b6e      	ldr	r3, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a6d      	ldr	r2, [pc, #436]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7ff fb89 	bl	8001bd4 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb85 	bl	8001bd4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0bc      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b61      	ldr	r3, [pc, #388]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x33a>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fb73 	bl	8001bd4 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7ff fb6f 	bl	8001bd4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0a6      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b52      	ldr	r3, [pc, #328]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a51      	ldr	r2, [pc, #324]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8092 	beq.w	8002654 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d05c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d141      	bne.n	80025c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b48      	ldr	r3, [pc, #288]	; (8002668 <HAL_RCC_OscConfig+0x4dc>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fb43 	bl	8001bd4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff fb3f 	bl	8001bd4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e078      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	019b      	lsls	r3, r3, #6
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	4933      	ldr	r1, [pc, #204]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCC_OscConfig+0x4dc>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fb18 	bl	8001bd4 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff fb14 	bl	8001bd4 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04d      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x41c>
 80025c6:	e045      	b.n	8002654 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x4dc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fb01 	bl	8001bd4 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff fafd 	bl	8001bd4 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e036      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x44a>
 80025f4:	e02e      	b.n	8002654 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e029      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_RCC_OscConfig+0x4d8>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	429a      	cmp	r2, r3
 8002614:	d11c      	bne.n	8002650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d115      	bne.n	8002650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002630:	4293      	cmp	r3, r2
 8002632:	d10d      	bne.n	8002650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40007000 	.word	0x40007000
 8002664:	40023800 	.word	0x40023800
 8002668:	42470060 	.word	0x42470060

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0cc      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d90c      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d044      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e067      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4934      	ldr	r1, [pc, #208]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7ff fa3a 	bl	8001bd4 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7ff fa36 	bl	8001bd4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4601      	mov	r1, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	fa21 f303 	lsr.w	r3, r1, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f99a 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023800 	.word	0x40023800
 800282c:	080198f0 	.word	0x080198f0
 8002830:	2000940c 	.word	0x2000940c
 8002834:	20009410 	.word	0x20009410

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d007      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x32>
 800285a:	2b08      	cmp	r3, #8
 800285c:	d008      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x38>
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 80b4 	bne.w	80029cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002866:	60bb      	str	r3, [r7, #8]
       break;
 8002868:	e0b3      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800286a:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800286c:	60bb      	str	r3, [r7, #8]
      break;
 800286e:	e0b0      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002870:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002878:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d04a      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b55      	ldr	r3, [pc, #340]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	f04f 0400 	mov.w	r4, #0
 8002890:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	ea03 0501 	and.w	r5, r3, r1
 800289c:	ea04 0602 	and.w	r6, r4, r2
 80028a0:	4629      	mov	r1, r5
 80028a2:	4632      	mov	r2, r6
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	f04f 0400 	mov.w	r4, #0
 80028ac:	0154      	lsls	r4, r2, #5
 80028ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028b2:	014b      	lsls	r3, r1, #5
 80028b4:	4619      	mov	r1, r3
 80028b6:	4622      	mov	r2, r4
 80028b8:	1b49      	subs	r1, r1, r5
 80028ba:	eb62 0206 	sbc.w	r2, r2, r6
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	f04f 0400 	mov.w	r4, #0
 80028c6:	0194      	lsls	r4, r2, #6
 80028c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028cc:	018b      	lsls	r3, r1, #6
 80028ce:	1a5b      	subs	r3, r3, r1
 80028d0:	eb64 0402 	sbc.w	r4, r4, r2
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	00e2      	lsls	r2, r4, #3
 80028de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028e2:	00d9      	lsls	r1, r3, #3
 80028e4:	460b      	mov	r3, r1
 80028e6:	4614      	mov	r4, r2
 80028e8:	195b      	adds	r3, r3, r5
 80028ea:	eb44 0406 	adc.w	r4, r4, r6
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	0262      	lsls	r2, r4, #9
 80028f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028fc:	0259      	lsls	r1, r3, #9
 80028fe:	460b      	mov	r3, r1
 8002900:	4614      	mov	r4, r2
 8002902:	4618      	mov	r0, r3
 8002904:	4621      	mov	r1, r4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 0400 	mov.w	r4, #0
 800290c:	461a      	mov	r2, r3
 800290e:	4623      	mov	r3, r4
 8002910:	f7fd fcce 	bl	80002b0 <__aeabi_uldivmod>
 8002914:	4603      	mov	r3, r0
 8002916:	460c      	mov	r4, r1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e049      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	f04f 0400 	mov.w	r4, #0
 8002926:	f240 11ff 	movw	r1, #511	; 0x1ff
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	ea03 0501 	and.w	r5, r3, r1
 8002932:	ea04 0602 	and.w	r6, r4, r2
 8002936:	4629      	mov	r1, r5
 8002938:	4632      	mov	r2, r6
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f04f 0400 	mov.w	r4, #0
 8002942:	0154      	lsls	r4, r2, #5
 8002944:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002948:	014b      	lsls	r3, r1, #5
 800294a:	4619      	mov	r1, r3
 800294c:	4622      	mov	r2, r4
 800294e:	1b49      	subs	r1, r1, r5
 8002950:	eb62 0206 	sbc.w	r2, r2, r6
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	0194      	lsls	r4, r2, #6
 800295e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	1a5b      	subs	r3, r3, r1
 8002966:	eb64 0402 	sbc.w	r4, r4, r2
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	00e2      	lsls	r2, r4, #3
 8002974:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002978:	00d9      	lsls	r1, r3, #3
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	195b      	adds	r3, r3, r5
 8002980:	eb44 0406 	adc.w	r4, r4, r6
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	02a2      	lsls	r2, r4, #10
 800298e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002992:	0299      	lsls	r1, r3, #10
 8002994:	460b      	mov	r3, r1
 8002996:	4614      	mov	r4, r2
 8002998:	4618      	mov	r0, r3
 800299a:	4621      	mov	r1, r4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f04f 0400 	mov.w	r4, #0
 80029a2:	461a      	mov	r2, r3
 80029a4:	4623      	mov	r3, r4
 80029a6:	f7fd fc83 	bl	80002b0 <__aeabi_uldivmod>
 80029aa:	4603      	mov	r3, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	60bb      	str	r3, [r7, #8]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ce:	60bb      	str	r3, [r7, #8]
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	68bb      	ldr	r3, [r7, #8]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	2000940c 	.word	0x2000940c

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff0 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0a9b      	lsrs	r3, r3, #10
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08019900 	.word	0x08019900

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffdc 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a30:	4601      	mov	r1, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08019900 	.word	0x08019900

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e01d      	b.n	8002a9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe ff2c 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f000 fa4a 	bl	8002f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b06      	cmp	r3, #6
 8002ace:	d007      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_TIM_Base_Stop_IT+0x48>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	f240 4344 	movw	r3, #1092	; 0x444
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_Base_Stop_IT+0x48>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0202 	mvn.w	r2, #2
 8002b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9af 	bl	8002eea <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9a1 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9b2 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f985 	bl	8002eea <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f977 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f988 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f95b 	bl	8002eea <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f94d 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f95e 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f931 	bl	8002eea <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f923 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f934 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8fd 	bl	8002ec2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 faac 	bl	800324c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8f9 	bl	8002f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0220 	mvn.w	r2, #32
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa76 	bl	8003238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_ConfigClockSource+0x18>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e0a6      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x166>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d067      	beq.n	8002e74 <HAL_TIM_ConfigClockSource+0x120>
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d80b      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x6c>
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d073      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x140>
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d802      	bhi.n	8002db6 <HAL_TIM_ConfigClockSource+0x62>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d06f      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002db4:	e078      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d06c      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x140>
 8002dba:	2b30      	cmp	r3, #48	; 0x30
 8002dbc:	d06a      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002dbe:	e073      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dc0:	2b70      	cmp	r3, #112	; 0x70
 8002dc2:	d00d      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0x8c>
 8002dc4:	2b70      	cmp	r3, #112	; 0x70
 8002dc6:	d804      	bhi.n	8002dd2 <HAL_TIM_ConfigClockSource+0x7e>
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d033      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0xe0>
 8002dcc:	2b60      	cmp	r3, #96	; 0x60
 8002dce:	d041      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002dd0:	e06a      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	d066      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x152>
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d017      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002dde:	e063      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f000 f994 	bl	800311c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e04c      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f000 f97d 	bl	800311c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e30:	609a      	str	r2, [r3, #8]
      break;
 8002e32:	e039      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f000 f8f1 	bl	8003028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2150      	movs	r1, #80	; 0x50
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 f94a 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002e52:	e029      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 f910 	bl	8003086 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2160      	movs	r1, #96	; 0x60
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f93a 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002e72:	e019      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f000 f8d1 	bl	8003028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f92a 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002e92:	e009      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 f921 	bl	80030e6 <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a34      	ldr	r2, [pc, #208]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00f      	beq.n	8002f60 <TIM_Base_SetConfig+0x38>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d00b      	beq.n	8002f60 <TIM_Base_SetConfig+0x38>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a31      	ldr	r2, [pc, #196]	; (8003010 <TIM_Base_SetConfig+0xe8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_Base_SetConfig+0x38>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a30      	ldr	r2, [pc, #192]	; (8003014 <TIM_Base_SetConfig+0xec>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0x38>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <TIM_Base_SetConfig+0xf0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a25      	ldr	r2, [pc, #148]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01b      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d017      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_Base_SetConfig+0xe8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_Base_SetConfig+0xec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00f      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <TIM_Base_SetConfig+0xf0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	; (800301c <TIM_Base_SetConfig+0xf4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <TIM_Base_SetConfig+0xf8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <TIM_Base_SetConfig+0x8a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <TIM_Base_SetConfig+0xfc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d108      	bne.n	8002fc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <TIM_Base_SetConfig+0xe4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d103      	bne.n	8002ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	615a      	str	r2, [r3, #20]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800

08003028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f023 0201 	bic.w	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f023 030a 	bic.w	r3, r3, #10
 8003064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b087      	sub	sp, #28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f023 0210 	bic.w	r2, r3, #16
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	031b      	lsls	r3, r3, #12
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	f043 0307 	orr.w	r3, r3, #7
 8003108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	431a      	orrs	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003170:	2302      	movs	r3, #2
 8003172:	e050      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d013      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40014000 	.word	0x40014000

08003238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e03f      	b.n	80032f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fe fb4a 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 faef 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	4613      	mov	r3, r2
 8003306:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	d130      	bne.n	8003376 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Transmit_IT+0x26>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e029      	b.n	8003378 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_UART_Transmit_IT+0x38>
 800332e:	2302      	movs	r3, #2
 8003330:	e022      	b.n	8003378 <HAL_UART_Transmit_IT+0x7e>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003370:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	d140      	bne.n	8003420 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_UART_Receive_IT+0x26>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e039      	b.n	8003422 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_UART_Receive_IT+0x38>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e032      	b.n	8003422 <HAL_UART_Receive_IT+0x9e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2222      	movs	r2, #34	; 0x22
 80033e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0220 	orr.w	r2, r2, #32
 800341a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_UART_IRQHandler+0x52>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f982 	bl	8003784 <UART_Receive_IT>
      return;
 8003480:	e0d1      	b.n	8003626 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80b0 	beq.w	80035ea <HAL_UART_IRQHandler+0x1ba>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_UART_IRQHandler+0x70>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80a5 	beq.w	80035ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_UART_IRQHandler+0x90>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_UART_IRQHandler+0xb0>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_UART_IRQHandler+0xd0>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <HAL_UART_IRQHandler+0xfa>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_UART_IRQHandler+0xee>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	f043 0208 	orr.w	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d078      	beq.n	8003624 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <HAL_UART_IRQHandler+0x11c>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f91c 	bl	8003784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_UART_IRQHandler+0x144>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d031      	beq.n	80035d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f865 	bl	8003644 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d123      	bne.n	80035d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003596:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	4a21      	ldr	r2, [pc, #132]	; (800362c <HAL_UART_IRQHandler+0x1fc>)
 80035a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fc2e 	bl	8001e0e <HAL_DMA_Abort_IT>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d016      	beq.n	80035e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035c2:	4610      	mov	r0, r2
 80035c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c6:	e00e      	b.n	80035e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f831 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	e00a      	b.n	80035e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f82d 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d6:	e006      	b.n	80035e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f829 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035e4:	e01e      	b.n	8003624 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e6:	bf00      	nop
    return;
 80035e8:	e01c      	b.n	8003624 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_UART_IRQHandler+0x1d6>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f852 	bl	80036a8 <UART_Transmit_IT>
    return;
 8003604:	e00f      	b.n	8003626 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_UART_IRQHandler+0x1f6>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f89a 	bl	8003754 <UART_EndTransmit_IT>
    return;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003624:	bf00      	nop
  }
}
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	08003681 	.word	0x08003681

08003630 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800365a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff ffc8 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b21      	cmp	r3, #33	; 0x21
 80036ba:	d144      	bne.n	8003746 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d11a      	bne.n	80036fc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036da:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	621a      	str	r2, [r3, #32]
 80036ee:	e00e      	b.n	800370e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]
 80036fa:	e008      	b.n	800370e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	1c59      	adds	r1, r3, #1
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6211      	str	r1, [r2, #32]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29b      	uxth	r3, r3
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4619      	mov	r1, r3
 800371c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003730:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003740:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fc ffe1 	bl	800073c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b22      	cmp	r3, #34	; 0x22
 8003796:	d171      	bne.n	800387c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	d123      	bne.n	80037ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10e      	bne.n	80037ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
 80037cc:	e029      	b.n	8003822 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
 80037e8:	e01b      	b.n	8003822 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6858      	ldr	r0, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	1c59      	adds	r1, r3, #1
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6291      	str	r1, [r2, #40]	; 0x28
 8003802:	b2c2      	uxtb	r2, r0
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e00c      	b.n	8003822 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	1c58      	adds	r0, r3, #1
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	6288      	str	r0, [r1, #40]	; 0x28
 800381a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4619      	mov	r1, r3
 8003830:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003832:	2b00      	cmp	r3, #0
 8003834:	d120      	bne.n	8003878 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0220 	bic.w	r2, r2, #32
 8003844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fc ff5a 	bl	8000728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e002      	b.n	800387e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038ca:	f023 030c 	bic.w	r3, r3, #12
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f6:	f040 818b 	bne.w	8003c10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4ac1      	ldr	r2, [pc, #772]	; (8003c04 <UART_SetConfig+0x37c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d005      	beq.n	8003910 <UART_SetConfig+0x88>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4abf      	ldr	r2, [pc, #764]	; (8003c08 <UART_SetConfig+0x380>)
 800390a:	4293      	cmp	r3, r2
 800390c:	f040 80bd 	bne.w	8003a8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003910:	f7ff f88a 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003914:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	461d      	mov	r5, r3
 800391a:	f04f 0600 	mov.w	r6, #0
 800391e:	46a8      	mov	r8, r5
 8003920:	46b1      	mov	r9, r6
 8003922:	eb18 0308 	adds.w	r3, r8, r8
 8003926:	eb49 0409 	adc.w	r4, r9, r9
 800392a:	4698      	mov	r8, r3
 800392c:	46a1      	mov	r9, r4
 800392e:	eb18 0805 	adds.w	r8, r8, r5
 8003932:	eb49 0906 	adc.w	r9, r9, r6
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003942:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003946:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800394a:	4688      	mov	r8, r1
 800394c:	4691      	mov	r9, r2
 800394e:	eb18 0005 	adds.w	r0, r8, r5
 8003952:	eb49 0106 	adc.w	r1, r9, r6
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	461d      	mov	r5, r3
 800395c:	f04f 0600 	mov.w	r6, #0
 8003960:	196b      	adds	r3, r5, r5
 8003962:	eb46 0406 	adc.w	r4, r6, r6
 8003966:	461a      	mov	r2, r3
 8003968:	4623      	mov	r3, r4
 800396a:	f7fc fca1 	bl	80002b0 <__aeabi_uldivmod>
 800396e:	4603      	mov	r3, r0
 8003970:	460c      	mov	r4, r1
 8003972:	461a      	mov	r2, r3
 8003974:	4ba5      	ldr	r3, [pc, #660]	; (8003c0c <UART_SetConfig+0x384>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	461d      	mov	r5, r3
 8003984:	f04f 0600 	mov.w	r6, #0
 8003988:	46a9      	mov	r9, r5
 800398a:	46b2      	mov	sl, r6
 800398c:	eb19 0309 	adds.w	r3, r9, r9
 8003990:	eb4a 040a 	adc.w	r4, sl, sl
 8003994:	4699      	mov	r9, r3
 8003996:	46a2      	mov	sl, r4
 8003998:	eb19 0905 	adds.w	r9, r9, r5
 800399c:	eb4a 0a06 	adc.w	sl, sl, r6
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b4:	4689      	mov	r9, r1
 80039b6:	4692      	mov	sl, r2
 80039b8:	eb19 0005 	adds.w	r0, r9, r5
 80039bc:	eb4a 0106 	adc.w	r1, sl, r6
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	461d      	mov	r5, r3
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	196b      	adds	r3, r5, r5
 80039cc:	eb46 0406 	adc.w	r4, r6, r6
 80039d0:	461a      	mov	r2, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	f7fc fc6c 	bl	80002b0 <__aeabi_uldivmod>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	461a      	mov	r2, r3
 80039de:	4b8b      	ldr	r3, [pc, #556]	; (8003c0c <UART_SetConfig+0x384>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	; 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a86      	ldr	r2, [pc, #536]	; (8003c0c <UART_SetConfig+0x384>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a00:	4498      	add	r8, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	461d      	mov	r5, r3
 8003a06:	f04f 0600 	mov.w	r6, #0
 8003a0a:	46a9      	mov	r9, r5
 8003a0c:	46b2      	mov	sl, r6
 8003a0e:	eb19 0309 	adds.w	r3, r9, r9
 8003a12:	eb4a 040a 	adc.w	r4, sl, sl
 8003a16:	4699      	mov	r9, r3
 8003a18:	46a2      	mov	sl, r4
 8003a1a:	eb19 0905 	adds.w	r9, r9, r5
 8003a1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a36:	4689      	mov	r9, r1
 8003a38:	4692      	mov	sl, r2
 8003a3a:	eb19 0005 	adds.w	r0, r9, r5
 8003a3e:	eb4a 0106 	adc.w	r1, sl, r6
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	461d      	mov	r5, r3
 8003a48:	f04f 0600 	mov.w	r6, #0
 8003a4c:	196b      	adds	r3, r5, r5
 8003a4e:	eb46 0406 	adc.w	r4, r6, r6
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	f7fc fc2b 	bl	80002b0 <__aeabi_uldivmod>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <UART_SetConfig+0x384>)
 8003a62:	fba3 1302 	umull	r1, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2164      	movs	r1, #100	; 0x64
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <UART_SetConfig+0x384>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 0207 	and.w	r2, r3, #7
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4442      	add	r2, r8
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	e26f      	b.n	8003f6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a8a:	f7fe ffb9 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003a8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	461d      	mov	r5, r3
 8003a94:	f04f 0600 	mov.w	r6, #0
 8003a98:	46a8      	mov	r8, r5
 8003a9a:	46b1      	mov	r9, r6
 8003a9c:	eb18 0308 	adds.w	r3, r8, r8
 8003aa0:	eb49 0409 	adc.w	r4, r9, r9
 8003aa4:	4698      	mov	r8, r3
 8003aa6:	46a1      	mov	r9, r4
 8003aa8:	eb18 0805 	adds.w	r8, r8, r5
 8003aac:	eb49 0906 	adc.w	r9, r9, r6
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003abc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ac0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ac4:	4688      	mov	r8, r1
 8003ac6:	4691      	mov	r9, r2
 8003ac8:	eb18 0005 	adds.w	r0, r8, r5
 8003acc:	eb49 0106 	adc.w	r1, r9, r6
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	f04f 0600 	mov.w	r6, #0
 8003ada:	196b      	adds	r3, r5, r5
 8003adc:	eb46 0406 	adc.w	r4, r6, r6
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	f7fc fbe4 	bl	80002b0 <__aeabi_uldivmod>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <UART_SetConfig+0x384>)
 8003af0:	fba3 2302 	umull	r2, r3, r3, r2
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	461d      	mov	r5, r3
 8003afe:	f04f 0600 	mov.w	r6, #0
 8003b02:	46a9      	mov	r9, r5
 8003b04:	46b2      	mov	sl, r6
 8003b06:	eb19 0309 	adds.w	r3, r9, r9
 8003b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b0e:	4699      	mov	r9, r3
 8003b10:	46a2      	mov	sl, r4
 8003b12:	eb19 0905 	adds.w	r9, r9, r5
 8003b16:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b2e:	4689      	mov	r9, r1
 8003b30:	4692      	mov	sl, r2
 8003b32:	eb19 0005 	adds.w	r0, r9, r5
 8003b36:	eb4a 0106 	adc.w	r1, sl, r6
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	461d      	mov	r5, r3
 8003b40:	f04f 0600 	mov.w	r6, #0
 8003b44:	196b      	adds	r3, r5, r5
 8003b46:	eb46 0406 	adc.w	r4, r6, r6
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	f7fc fbaf 	bl	80002b0 <__aeabi_uldivmod>
 8003b52:	4603      	mov	r3, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <UART_SetConfig+0x384>)
 8003b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2164      	movs	r1, #100	; 0x64
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	3332      	adds	r3, #50	; 0x32
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <UART_SetConfig+0x384>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b7a:	4498      	add	r8, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f04f 0600 	mov.w	r6, #0
 8003b84:	46a9      	mov	r9, r5
 8003b86:	46b2      	mov	sl, r6
 8003b88:	eb19 0309 	adds.w	r3, r9, r9
 8003b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b90:	4699      	mov	r9, r3
 8003b92:	46a2      	mov	sl, r4
 8003b94:	eb19 0905 	adds.w	r9, r9, r5
 8003b98:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bb0:	4689      	mov	r9, r1
 8003bb2:	4692      	mov	sl, r2
 8003bb4:	eb19 0005 	adds.w	r0, r9, r5
 8003bb8:	eb4a 0106 	adc.w	r1, sl, r6
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	f04f 0600 	mov.w	r6, #0
 8003bc6:	196b      	adds	r3, r5, r5
 8003bc8:	eb46 0406 	adc.w	r4, r6, r6
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	f7fc fb6e 	bl	80002b0 <__aeabi_uldivmod>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <UART_SetConfig+0x384>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <UART_SetConfig+0x384>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 0207 	and.w	r2, r3, #7
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4442      	add	r2, r8
 8003c00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c02:	e1b2      	b.n	8003f6a <UART_SetConfig+0x6e2>
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4ad7      	ldr	r2, [pc, #860]	; (8003f74 <UART_SetConfig+0x6ec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d005      	beq.n	8003c26 <UART_SetConfig+0x39e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4ad6      	ldr	r2, [pc, #856]	; (8003f78 <UART_SetConfig+0x6f0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	f040 80d1 	bne.w	8003dc8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c26:	f7fe feff 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003c2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	469a      	mov	sl, r3
 8003c30:	f04f 0b00 	mov.w	fp, #0
 8003c34:	46d0      	mov	r8, sl
 8003c36:	46d9      	mov	r9, fp
 8003c38:	eb18 0308 	adds.w	r3, r8, r8
 8003c3c:	eb49 0409 	adc.w	r4, r9, r9
 8003c40:	4698      	mov	r8, r3
 8003c42:	46a1      	mov	r9, r4
 8003c44:	eb18 080a 	adds.w	r8, r8, sl
 8003c48:	eb49 090b 	adc.w	r9, r9, fp
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c60:	4688      	mov	r8, r1
 8003c62:	4691      	mov	r9, r2
 8003c64:	eb1a 0508 	adds.w	r5, sl, r8
 8003c68:	eb4b 0609 	adc.w	r6, fp, r9
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	f04f 0400 	mov.w	r4, #0
 8003c7e:	0094      	lsls	r4, r2, #2
 8003c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c84:	008b      	lsls	r3, r1, #2
 8003c86:	461a      	mov	r2, r3
 8003c88:	4623      	mov	r3, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	f7fc fb0f 	bl	80002b0 <__aeabi_uldivmod>
 8003c92:	4603      	mov	r3, r0
 8003c94:	460c      	mov	r4, r1
 8003c96:	461a      	mov	r2, r3
 8003c98:	4bb8      	ldr	r3, [pc, #736]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	469b      	mov	fp, r3
 8003ca8:	f04f 0c00 	mov.w	ip, #0
 8003cac:	46d9      	mov	r9, fp
 8003cae:	46e2      	mov	sl, ip
 8003cb0:	eb19 0309 	adds.w	r3, r9, r9
 8003cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb8:	4699      	mov	r9, r3
 8003cba:	46a2      	mov	sl, r4
 8003cbc:	eb19 090b 	adds.w	r9, r9, fp
 8003cc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd8:	4689      	mov	r9, r1
 8003cda:	4692      	mov	sl, r2
 8003cdc:	eb1b 0509 	adds.w	r5, fp, r9
 8003ce0:	eb4c 060a 	adc.w	r6, ip, sl
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	0094      	lsls	r4, r2, #2
 8003cf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	4631      	mov	r1, r6
 8003d06:	f7fc fad3 	bl	80002b0 <__aeabi_uldivmod>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b9a      	ldr	r3, [pc, #616]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003d12:	fba3 1302 	umull	r1, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2164      	movs	r1, #100	; 0x64
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	3332      	adds	r3, #50	; 0x32
 8003d24:	4a95      	ldr	r2, [pc, #596]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	4498      	add	r8, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	469b      	mov	fp, r3
 8003d36:	f04f 0c00 	mov.w	ip, #0
 8003d3a:	46d9      	mov	r9, fp
 8003d3c:	46e2      	mov	sl, ip
 8003d3e:	eb19 0309 	adds.w	r3, r9, r9
 8003d42:	eb4a 040a 	adc.w	r4, sl, sl
 8003d46:	4699      	mov	r9, r3
 8003d48:	46a2      	mov	sl, r4
 8003d4a:	eb19 090b 	adds.w	r9, r9, fp
 8003d4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d66:	4689      	mov	r9, r1
 8003d68:	4692      	mov	sl, r2
 8003d6a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d6e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0094      	lsls	r4, r2, #2
 8003d86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	4631      	mov	r1, r6
 8003d94:	f7fc fa8c 	bl	80002b0 <__aeabi_uldivmod>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b77      	ldr	r3, [pc, #476]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003da0:	fba3 1302 	umull	r1, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2164      	movs	r1, #100	; 0x64
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4442      	add	r2, r8
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	e0d0      	b.n	8003f6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7fe fe1a 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f04f 0b00 	mov.w	fp, #0
 8003dd6:	46d0      	mov	r8, sl
 8003dd8:	46d9      	mov	r9, fp
 8003dda:	eb18 0308 	adds.w	r3, r8, r8
 8003dde:	eb49 0409 	adc.w	r4, r9, r9
 8003de2:	4698      	mov	r8, r3
 8003de4:	46a1      	mov	r9, r4
 8003de6:	eb18 080a 	adds.w	r8, r8, sl
 8003dea:	eb49 090b 	adc.w	r9, r9, fp
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e02:	4688      	mov	r8, r1
 8003e04:	4691      	mov	r9, r2
 8003e06:	eb1a 0508 	adds.w	r5, sl, r8
 8003e0a:	eb4b 0609 	adc.w	r6, fp, r9
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4619      	mov	r1, r3
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	f04f 0400 	mov.w	r4, #0
 8003e20:	0094      	lsls	r4, r2, #2
 8003e22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e26:	008b      	lsls	r3, r1, #2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	4631      	mov	r1, r6
 8003e30:	f7fc fa3e 	bl	80002b0 <__aeabi_uldivmod>
 8003e34:	4603      	mov	r3, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	469b      	mov	fp, r3
 8003e4a:	f04f 0c00 	mov.w	ip, #0
 8003e4e:	46d9      	mov	r9, fp
 8003e50:	46e2      	mov	sl, ip
 8003e52:	eb19 0309 	adds.w	r3, r9, r9
 8003e56:	eb4a 040a 	adc.w	r4, sl, sl
 8003e5a:	4699      	mov	r9, r3
 8003e5c:	46a2      	mov	sl, r4
 8003e5e:	eb19 090b 	adds.w	r9, r9, fp
 8003e62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e7a:	4689      	mov	r9, r1
 8003e7c:	4692      	mov	sl, r2
 8003e7e:	eb1b 0509 	adds.w	r5, fp, r9
 8003e82:	eb4c 060a 	adc.w	r6, ip, sl
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	0094      	lsls	r4, r2, #2
 8003e9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e9e:	008b      	lsls	r3, r1, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	f7fc fa02 	bl	80002b0 <__aeabi_uldivmod>
 8003eac:	4603      	mov	r3, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	4498      	add	r8, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	469b      	mov	fp, r3
 8003ed8:	f04f 0c00 	mov.w	ip, #0
 8003edc:	46d9      	mov	r9, fp
 8003ede:	46e2      	mov	sl, ip
 8003ee0:	eb19 0309 	adds.w	r3, r9, r9
 8003ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ee8:	4699      	mov	r9, r3
 8003eea:	46a2      	mov	sl, r4
 8003eec:	eb19 090b 	adds.w	r9, r9, fp
 8003ef0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ef4:	f04f 0100 	mov.w	r1, #0
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f08:	4689      	mov	r9, r1
 8003f0a:	4692      	mov	sl, r2
 8003f0c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f10:	eb4c 060a 	adc.w	r6, ip, sl
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	f04f 0400 	mov.w	r4, #0
 8003f26:	0094      	lsls	r4, r2, #2
 8003f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f2c:	008b      	lsls	r3, r1, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	4631      	mov	r1, r6
 8003f36:	f7fc f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003f42:	fba3 1302 	umull	r1, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2164      	movs	r1, #100	; 0x64
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4442      	add	r2, r8
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	e7ff      	b.n	8003f6a <UART_SetConfig+0x6e2>
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f74:	40011000 	.word	0x40011000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	51eb851f 	.word	0x51eb851f

08003f80 <__errno>:
 8003f80:	4b01      	ldr	r3, [pc, #4]	; (8003f88 <__errno+0x8>)
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20009418 	.word	0x20009418

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	4e0d      	ldr	r6, [pc, #52]	; (8003fc4 <__libc_init_array+0x38>)
 8003f90:	4c0d      	ldr	r4, [pc, #52]	; (8003fc8 <__libc_init_array+0x3c>)
 8003f92:	1ba4      	subs	r4, r4, r6
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	2500      	movs	r5, #0
 8003f98:	42a5      	cmp	r5, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	4e0b      	ldr	r6, [pc, #44]	; (8003fcc <__libc_init_array+0x40>)
 8003f9e:	4c0c      	ldr	r4, [pc, #48]	; (8003fd0 <__libc_init_array+0x44>)
 8003fa0:	f000 fcba 	bl	8004918 <_init>
 8003fa4:	1ba4      	subs	r4, r4, r6
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	2500      	movs	r5, #0
 8003faa:	42a5      	cmp	r5, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb4:	4798      	blx	r3
 8003fb6:	3501      	adds	r5, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fbe:	4798      	blx	r3
 8003fc0:	3501      	adds	r5, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	08019944 	.word	0x08019944
 8003fc8:	08019944 	.word	0x08019944
 8003fcc:	08019944 	.word	0x08019944
 8003fd0:	08019948 	.word	0x08019948

08003fd4 <malloc>:
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <malloc+0xc>)
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f000 b861 	b.w	80040a0 <_malloc_r>
 8003fde:	bf00      	nop
 8003fe0:	20009418 	.word	0x20009418

08003fe4 <free>:
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <free+0xc>)
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f000 b80b 	b.w	8004004 <_free_r>
 8003fee:	bf00      	nop
 8003ff0:	20009418 	.word	0x20009418

08003ff4 <memset>:
 8003ff4:	4402      	add	r2, r0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <_free_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4605      	mov	r5, r0
 8004008:	2900      	cmp	r1, #0
 800400a:	d045      	beq.n	8004098 <_free_r+0x94>
 800400c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004010:	1f0c      	subs	r4, r1, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfb8      	it	lt
 8004016:	18e4      	addlt	r4, r4, r3
 8004018:	f000 f94f 	bl	80042ba <__malloc_lock>
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <_free_r+0x98>)
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	4610      	mov	r0, r2
 8004022:	b933      	cbnz	r3, 8004032 <_free_r+0x2e>
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	6014      	str	r4, [r2, #0]
 8004028:	4628      	mov	r0, r5
 800402a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402e:	f000 b945 	b.w	80042bc <__malloc_unlock>
 8004032:	42a3      	cmp	r3, r4
 8004034:	d90c      	bls.n	8004050 <_free_r+0x4c>
 8004036:	6821      	ldr	r1, [r4, #0]
 8004038:	1862      	adds	r2, r4, r1
 800403a:	4293      	cmp	r3, r2
 800403c:	bf04      	itt	eq
 800403e:	681a      	ldreq	r2, [r3, #0]
 8004040:	685b      	ldreq	r3, [r3, #4]
 8004042:	6063      	str	r3, [r4, #4]
 8004044:	bf04      	itt	eq
 8004046:	1852      	addeq	r2, r2, r1
 8004048:	6022      	streq	r2, [r4, #0]
 800404a:	6004      	str	r4, [r0, #0]
 800404c:	e7ec      	b.n	8004028 <_free_r+0x24>
 800404e:	4613      	mov	r3, r2
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	b10a      	cbz	r2, 8004058 <_free_r+0x54>
 8004054:	42a2      	cmp	r2, r4
 8004056:	d9fa      	bls.n	800404e <_free_r+0x4a>
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	1858      	adds	r0, r3, r1
 800405c:	42a0      	cmp	r0, r4
 800405e:	d10b      	bne.n	8004078 <_free_r+0x74>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	4401      	add	r1, r0
 8004064:	1858      	adds	r0, r3, r1
 8004066:	4282      	cmp	r2, r0
 8004068:	6019      	str	r1, [r3, #0]
 800406a:	d1dd      	bne.n	8004028 <_free_r+0x24>
 800406c:	6810      	ldr	r0, [r2, #0]
 800406e:	6852      	ldr	r2, [r2, #4]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	4401      	add	r1, r0
 8004074:	6019      	str	r1, [r3, #0]
 8004076:	e7d7      	b.n	8004028 <_free_r+0x24>
 8004078:	d902      	bls.n	8004080 <_free_r+0x7c>
 800407a:	230c      	movs	r3, #12
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	e7d3      	b.n	8004028 <_free_r+0x24>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	1821      	adds	r1, r4, r0
 8004084:	428a      	cmp	r2, r1
 8004086:	bf04      	itt	eq
 8004088:	6811      	ldreq	r1, [r2, #0]
 800408a:	6852      	ldreq	r2, [r2, #4]
 800408c:	6062      	str	r2, [r4, #4]
 800408e:	bf04      	itt	eq
 8004090:	1809      	addeq	r1, r1, r0
 8004092:	6021      	streq	r1, [r4, #0]
 8004094:	605c      	str	r4, [r3, #4]
 8004096:	e7c7      	b.n	8004028 <_free_r+0x24>
 8004098:	bd38      	pop	{r3, r4, r5, pc}
 800409a:	bf00      	nop
 800409c:	2000956c 	.word	0x2000956c

080040a0 <_malloc_r>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	1ccd      	adds	r5, r1, #3
 80040a4:	f025 0503 	bic.w	r5, r5, #3
 80040a8:	3508      	adds	r5, #8
 80040aa:	2d0c      	cmp	r5, #12
 80040ac:	bf38      	it	cc
 80040ae:	250c      	movcc	r5, #12
 80040b0:	2d00      	cmp	r5, #0
 80040b2:	4606      	mov	r6, r0
 80040b4:	db01      	blt.n	80040ba <_malloc_r+0x1a>
 80040b6:	42a9      	cmp	r1, r5
 80040b8:	d903      	bls.n	80040c2 <_malloc_r+0x22>
 80040ba:	230c      	movs	r3, #12
 80040bc:	6033      	str	r3, [r6, #0]
 80040be:	2000      	movs	r0, #0
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
 80040c2:	f000 f8fa 	bl	80042ba <__malloc_lock>
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <_malloc_r+0xac>)
 80040c8:	6814      	ldr	r4, [r2, #0]
 80040ca:	4621      	mov	r1, r4
 80040cc:	b991      	cbnz	r1, 80040f4 <_malloc_r+0x54>
 80040ce:	4c20      	ldr	r4, [pc, #128]	; (8004150 <_malloc_r+0xb0>)
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	b91b      	cbnz	r3, 80040dc <_malloc_r+0x3c>
 80040d4:	4630      	mov	r0, r6
 80040d6:	f000 f895 	bl	8004204 <_sbrk_r>
 80040da:	6020      	str	r0, [r4, #0]
 80040dc:	4629      	mov	r1, r5
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 f890 	bl	8004204 <_sbrk_r>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d124      	bne.n	8004132 <_malloc_r+0x92>
 80040e8:	230c      	movs	r3, #12
 80040ea:	6033      	str	r3, [r6, #0]
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 f8e5 	bl	80042bc <__malloc_unlock>
 80040f2:	e7e4      	b.n	80040be <_malloc_r+0x1e>
 80040f4:	680b      	ldr	r3, [r1, #0]
 80040f6:	1b5b      	subs	r3, r3, r5
 80040f8:	d418      	bmi.n	800412c <_malloc_r+0x8c>
 80040fa:	2b0b      	cmp	r3, #11
 80040fc:	d90f      	bls.n	800411e <_malloc_r+0x7e>
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	50cd      	str	r5, [r1, r3]
 8004102:	18cc      	adds	r4, r1, r3
 8004104:	4630      	mov	r0, r6
 8004106:	f000 f8d9 	bl	80042bc <__malloc_unlock>
 800410a:	f104 000b 	add.w	r0, r4, #11
 800410e:	1d23      	adds	r3, r4, #4
 8004110:	f020 0007 	bic.w	r0, r0, #7
 8004114:	1ac3      	subs	r3, r0, r3
 8004116:	d0d3      	beq.n	80040c0 <_malloc_r+0x20>
 8004118:	425a      	negs	r2, r3
 800411a:	50e2      	str	r2, [r4, r3]
 800411c:	e7d0      	b.n	80040c0 <_malloc_r+0x20>
 800411e:	428c      	cmp	r4, r1
 8004120:	684b      	ldr	r3, [r1, #4]
 8004122:	bf16      	itet	ne
 8004124:	6063      	strne	r3, [r4, #4]
 8004126:	6013      	streq	r3, [r2, #0]
 8004128:	460c      	movne	r4, r1
 800412a:	e7eb      	b.n	8004104 <_malloc_r+0x64>
 800412c:	460c      	mov	r4, r1
 800412e:	6849      	ldr	r1, [r1, #4]
 8004130:	e7cc      	b.n	80040cc <_malloc_r+0x2c>
 8004132:	1cc4      	adds	r4, r0, #3
 8004134:	f024 0403 	bic.w	r4, r4, #3
 8004138:	42a0      	cmp	r0, r4
 800413a:	d005      	beq.n	8004148 <_malloc_r+0xa8>
 800413c:	1a21      	subs	r1, r4, r0
 800413e:	4630      	mov	r0, r6
 8004140:	f000 f860 	bl	8004204 <_sbrk_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d0cf      	beq.n	80040e8 <_malloc_r+0x48>
 8004148:	6025      	str	r5, [r4, #0]
 800414a:	e7db      	b.n	8004104 <_malloc_r+0x64>
 800414c:	2000956c 	.word	0x2000956c
 8004150:	20009570 	.word	0x20009570

08004154 <srand>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <srand+0x38>)
 8004158:	681c      	ldr	r4, [r3, #0]
 800415a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800415c:	4605      	mov	r5, r0
 800415e:	b97b      	cbnz	r3, 8004180 <srand+0x2c>
 8004160:	2018      	movs	r0, #24
 8004162:	f7ff ff37 	bl	8003fd4 <malloc>
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <srand+0x3c>)
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <srand+0x40>)
 800416a:	63a0      	str	r0, [r4, #56]	; 0x38
 800416c:	e9c0 2300 	strd	r2, r3, [r0]
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <srand+0x44>)
 8004172:	6083      	str	r3, [r0, #8]
 8004174:	230b      	movs	r3, #11
 8004176:	8183      	strh	r3, [r0, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	2300      	movs	r3, #0
 800417c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004182:	2200      	movs	r2, #0
 8004184:	611d      	str	r5, [r3, #16]
 8004186:	615a      	str	r2, [r3, #20]
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	20009418 	.word	0x20009418
 8004190:	abcd330e 	.word	0xabcd330e
 8004194:	e66d1234 	.word	0xe66d1234
 8004198:	0005deec 	.word	0x0005deec

0800419c <rand>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <rand+0x50>)
 80041a0:	681c      	ldr	r4, [r3, #0]
 80041a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041a4:	b97b      	cbnz	r3, 80041c6 <rand+0x2a>
 80041a6:	2018      	movs	r0, #24
 80041a8:	f7ff ff14 	bl	8003fd4 <malloc>
 80041ac:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <rand+0x54>)
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <rand+0x58>)
 80041b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80041b2:	e9c0 2300 	strd	r2, r3, [r0]
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <rand+0x5c>)
 80041b8:	6083      	str	r3, [r0, #8]
 80041ba:	230b      	movs	r3, #11
 80041bc:	8183      	strh	r3, [r0, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	2300      	movs	r3, #0
 80041c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80041c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041c8:	480c      	ldr	r0, [pc, #48]	; (80041fc <rand+0x60>)
 80041ca:	690a      	ldr	r2, [r1, #16]
 80041cc:	694b      	ldr	r3, [r1, #20]
 80041ce:	4c0c      	ldr	r4, [pc, #48]	; (8004200 <rand+0x64>)
 80041d0:	4350      	muls	r0, r2
 80041d2:	fb04 0003 	mla	r0, r4, r3, r0
 80041d6:	fba2 2304 	umull	r2, r3, r2, r4
 80041da:	4403      	add	r3, r0
 80041dc:	1c54      	adds	r4, r2, #1
 80041de:	f143 0500 	adc.w	r5, r3, #0
 80041e2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80041e6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	20009418 	.word	0x20009418
 80041f0:	abcd330e 	.word	0xabcd330e
 80041f4:	e66d1234 	.word	0xe66d1234
 80041f8:	0005deec 	.word	0x0005deec
 80041fc:	5851f42d 	.word	0x5851f42d
 8004200:	4c957f2d 	.word	0x4c957f2d

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4c06      	ldr	r4, [pc, #24]	; (8004220 <_sbrk_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4605      	mov	r5, r0
 800420c:	4608      	mov	r0, r1
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	f7fd fc0e 	bl	8001a30 <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	2000be10 	.word	0x2000be10

08004224 <siprintf>:
 8004224:	b40e      	push	{r1, r2, r3}
 8004226:	b500      	push	{lr}
 8004228:	b09c      	sub	sp, #112	; 0x70
 800422a:	ab1d      	add	r3, sp, #116	; 0x74
 800422c:	9002      	str	r0, [sp, #8]
 800422e:	9006      	str	r0, [sp, #24]
 8004230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004234:	4809      	ldr	r0, [pc, #36]	; (800425c <siprintf+0x38>)
 8004236:	9107      	str	r1, [sp, #28]
 8004238:	9104      	str	r1, [sp, #16]
 800423a:	4909      	ldr	r1, [pc, #36]	; (8004260 <siprintf+0x3c>)
 800423c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004240:	9105      	str	r1, [sp, #20]
 8004242:	6800      	ldr	r0, [r0, #0]
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	a902      	add	r1, sp, #8
 8004248:	f000 f894 	bl	8004374 <_svfiprintf_r>
 800424c:	9b02      	ldr	r3, [sp, #8]
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	b01c      	add	sp, #112	; 0x70
 8004254:	f85d eb04 	ldr.w	lr, [sp], #4
 8004258:	b003      	add	sp, #12
 800425a:	4770      	bx	lr
 800425c:	20009418 	.word	0x20009418
 8004260:	ffff0208 	.word	0xffff0208

08004264 <strcat>:
 8004264:	b510      	push	{r4, lr}
 8004266:	4603      	mov	r3, r0
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	1c5c      	adds	r4, r3, #1
 800426c:	b93a      	cbnz	r2, 800427e <strcat+0x1a>
 800426e:	3b01      	subs	r3, #1
 8004270:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004274:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004278:	2a00      	cmp	r2, #0
 800427a:	d1f9      	bne.n	8004270 <strcat+0xc>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	4623      	mov	r3, r4
 8004280:	e7f2      	b.n	8004268 <strcat+0x4>

08004282 <strcpy>:
 8004282:	4603      	mov	r3, r0
 8004284:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004288:	f803 2b01 	strb.w	r2, [r3], #1
 800428c:	2a00      	cmp	r2, #0
 800428e:	d1f9      	bne.n	8004284 <strcpy+0x2>
 8004290:	4770      	bx	lr

08004292 <strncat>:
 8004292:	b530      	push	{r4, r5, lr}
 8004294:	4603      	mov	r3, r0
 8004296:	781c      	ldrb	r4, [r3, #0]
 8004298:	1c5d      	adds	r5, r3, #1
 800429a:	b944      	cbnz	r4, 80042ae <strncat+0x1c>
 800429c:	f112 32ff 	adds.w	r2, r2, #4294967295
 80042a0:	d304      	bcc.n	80042ac <strncat+0x1a>
 80042a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a6:	f803 4b01 	strb.w	r4, [r3], #1
 80042aa:	b914      	cbnz	r4, 80042b2 <strncat+0x20>
 80042ac:	bd30      	pop	{r4, r5, pc}
 80042ae:	462b      	mov	r3, r5
 80042b0:	e7f1      	b.n	8004296 <strncat+0x4>
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1f2      	bne.n	800429c <strncat+0xa>
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e7f0      	b.n	800429c <strncat+0xa>

080042ba <__malloc_lock>:
 80042ba:	4770      	bx	lr

080042bc <__malloc_unlock>:
 80042bc:	4770      	bx	lr

080042be <__ssputs_r>:
 80042be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c2:	688e      	ldr	r6, [r1, #8]
 80042c4:	429e      	cmp	r6, r3
 80042c6:	4682      	mov	sl, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	4690      	mov	r8, r2
 80042cc:	4699      	mov	r9, r3
 80042ce:	d837      	bhi.n	8004340 <__ssputs_r+0x82>
 80042d0:	898a      	ldrh	r2, [r1, #12]
 80042d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042d6:	d031      	beq.n	800433c <__ssputs_r+0x7e>
 80042d8:	6825      	ldr	r5, [r4, #0]
 80042da:	6909      	ldr	r1, [r1, #16]
 80042dc:	1a6f      	subs	r7, r5, r1
 80042de:	6965      	ldr	r5, [r4, #20]
 80042e0:	2302      	movs	r3, #2
 80042e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80042ea:	f109 0301 	add.w	r3, r9, #1
 80042ee:	443b      	add	r3, r7
 80042f0:	429d      	cmp	r5, r3
 80042f2:	bf38      	it	cc
 80042f4:	461d      	movcc	r5, r3
 80042f6:	0553      	lsls	r3, r2, #21
 80042f8:	d530      	bpl.n	800435c <__ssputs_r+0x9e>
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7ff fed0 	bl	80040a0 <_malloc_r>
 8004300:	4606      	mov	r6, r0
 8004302:	b950      	cbnz	r0, 800431a <__ssputs_r+0x5c>
 8004304:	230c      	movs	r3, #12
 8004306:	f8ca 3000 	str.w	r3, [sl]
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	f04f 30ff 	mov.w	r0, #4294967295
 8004316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431a:	463a      	mov	r2, r7
 800431c:	6921      	ldr	r1, [r4, #16]
 800431e:	f000 faa9 	bl	8004874 <memcpy>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	6126      	str	r6, [r4, #16]
 8004330:	6165      	str	r5, [r4, #20]
 8004332:	443e      	add	r6, r7
 8004334:	1bed      	subs	r5, r5, r7
 8004336:	6026      	str	r6, [r4, #0]
 8004338:	60a5      	str	r5, [r4, #8]
 800433a:	464e      	mov	r6, r9
 800433c:	454e      	cmp	r6, r9
 800433e:	d900      	bls.n	8004342 <__ssputs_r+0x84>
 8004340:	464e      	mov	r6, r9
 8004342:	4632      	mov	r2, r6
 8004344:	4641      	mov	r1, r8
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	f000 fa9f 	bl	800488a <memmove>
 800434c:	68a3      	ldr	r3, [r4, #8]
 800434e:	1b9b      	subs	r3, r3, r6
 8004350:	60a3      	str	r3, [r4, #8]
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	441e      	add	r6, r3
 8004356:	6026      	str	r6, [r4, #0]
 8004358:	2000      	movs	r0, #0
 800435a:	e7dc      	b.n	8004316 <__ssputs_r+0x58>
 800435c:	462a      	mov	r2, r5
 800435e:	f000 faad 	bl	80048bc <_realloc_r>
 8004362:	4606      	mov	r6, r0
 8004364:	2800      	cmp	r0, #0
 8004366:	d1e2      	bne.n	800432e <__ssputs_r+0x70>
 8004368:	6921      	ldr	r1, [r4, #16]
 800436a:	4650      	mov	r0, sl
 800436c:	f7ff fe4a 	bl	8004004 <_free_r>
 8004370:	e7c8      	b.n	8004304 <__ssputs_r+0x46>
	...

08004374 <_svfiprintf_r>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	461d      	mov	r5, r3
 800437a:	898b      	ldrh	r3, [r1, #12]
 800437c:	061f      	lsls	r7, r3, #24
 800437e:	b09d      	sub	sp, #116	; 0x74
 8004380:	4680      	mov	r8, r0
 8004382:	460c      	mov	r4, r1
 8004384:	4616      	mov	r6, r2
 8004386:	d50f      	bpl.n	80043a8 <_svfiprintf_r+0x34>
 8004388:	690b      	ldr	r3, [r1, #16]
 800438a:	b96b      	cbnz	r3, 80043a8 <_svfiprintf_r+0x34>
 800438c:	2140      	movs	r1, #64	; 0x40
 800438e:	f7ff fe87 	bl	80040a0 <_malloc_r>
 8004392:	6020      	str	r0, [r4, #0]
 8004394:	6120      	str	r0, [r4, #16]
 8004396:	b928      	cbnz	r0, 80043a4 <_svfiprintf_r+0x30>
 8004398:	230c      	movs	r3, #12
 800439a:	f8c8 3000 	str.w	r3, [r8]
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	e0c8      	b.n	8004536 <_svfiprintf_r+0x1c2>
 80043a4:	2340      	movs	r3, #64	; 0x40
 80043a6:	6163      	str	r3, [r4, #20]
 80043a8:	2300      	movs	r3, #0
 80043aa:	9309      	str	r3, [sp, #36]	; 0x24
 80043ac:	2320      	movs	r3, #32
 80043ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043b2:	2330      	movs	r3, #48	; 0x30
 80043b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043b8:	9503      	str	r5, [sp, #12]
 80043ba:	f04f 0b01 	mov.w	fp, #1
 80043be:	4637      	mov	r7, r6
 80043c0:	463d      	mov	r5, r7
 80043c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80043c6:	b10b      	cbz	r3, 80043cc <_svfiprintf_r+0x58>
 80043c8:	2b25      	cmp	r3, #37	; 0x25
 80043ca:	d13e      	bne.n	800444a <_svfiprintf_r+0xd6>
 80043cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80043d0:	d00b      	beq.n	80043ea <_svfiprintf_r+0x76>
 80043d2:	4653      	mov	r3, sl
 80043d4:	4632      	mov	r2, r6
 80043d6:	4621      	mov	r1, r4
 80043d8:	4640      	mov	r0, r8
 80043da:	f7ff ff70 	bl	80042be <__ssputs_r>
 80043de:	3001      	adds	r0, #1
 80043e0:	f000 80a4 	beq.w	800452c <_svfiprintf_r+0x1b8>
 80043e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e6:	4453      	add	r3, sl
 80043e8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ea:	783b      	ldrb	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 809d 	beq.w	800452c <_svfiprintf_r+0x1b8>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f04f 32ff 	mov.w	r2, #4294967295
 80043f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043fc:	9304      	str	r3, [sp, #16]
 80043fe:	9307      	str	r3, [sp, #28]
 8004400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004404:	931a      	str	r3, [sp, #104]	; 0x68
 8004406:	462f      	mov	r7, r5
 8004408:	2205      	movs	r2, #5
 800440a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800440e:	4850      	ldr	r0, [pc, #320]	; (8004550 <_svfiprintf_r+0x1dc>)
 8004410:	f7fb fefe 	bl	8000210 <memchr>
 8004414:	9b04      	ldr	r3, [sp, #16]
 8004416:	b9d0      	cbnz	r0, 800444e <_svfiprintf_r+0xda>
 8004418:	06d9      	lsls	r1, r3, #27
 800441a:	bf44      	itt	mi
 800441c:	2220      	movmi	r2, #32
 800441e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004422:	071a      	lsls	r2, r3, #28
 8004424:	bf44      	itt	mi
 8004426:	222b      	movmi	r2, #43	; 0x2b
 8004428:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800442c:	782a      	ldrb	r2, [r5, #0]
 800442e:	2a2a      	cmp	r2, #42	; 0x2a
 8004430:	d015      	beq.n	800445e <_svfiprintf_r+0xea>
 8004432:	9a07      	ldr	r2, [sp, #28]
 8004434:	462f      	mov	r7, r5
 8004436:	2000      	movs	r0, #0
 8004438:	250a      	movs	r5, #10
 800443a:	4639      	mov	r1, r7
 800443c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004440:	3b30      	subs	r3, #48	; 0x30
 8004442:	2b09      	cmp	r3, #9
 8004444:	d94d      	bls.n	80044e2 <_svfiprintf_r+0x16e>
 8004446:	b1b8      	cbz	r0, 8004478 <_svfiprintf_r+0x104>
 8004448:	e00f      	b.n	800446a <_svfiprintf_r+0xf6>
 800444a:	462f      	mov	r7, r5
 800444c:	e7b8      	b.n	80043c0 <_svfiprintf_r+0x4c>
 800444e:	4a40      	ldr	r2, [pc, #256]	; (8004550 <_svfiprintf_r+0x1dc>)
 8004450:	1a80      	subs	r0, r0, r2
 8004452:	fa0b f000 	lsl.w	r0, fp, r0
 8004456:	4318      	orrs	r0, r3
 8004458:	9004      	str	r0, [sp, #16]
 800445a:	463d      	mov	r5, r7
 800445c:	e7d3      	b.n	8004406 <_svfiprintf_r+0x92>
 800445e:	9a03      	ldr	r2, [sp, #12]
 8004460:	1d11      	adds	r1, r2, #4
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	9103      	str	r1, [sp, #12]
 8004466:	2a00      	cmp	r2, #0
 8004468:	db01      	blt.n	800446e <_svfiprintf_r+0xfa>
 800446a:	9207      	str	r2, [sp, #28]
 800446c:	e004      	b.n	8004478 <_svfiprintf_r+0x104>
 800446e:	4252      	negs	r2, r2
 8004470:	f043 0302 	orr.w	r3, r3, #2
 8004474:	9207      	str	r2, [sp, #28]
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	783b      	ldrb	r3, [r7, #0]
 800447a:	2b2e      	cmp	r3, #46	; 0x2e
 800447c:	d10c      	bne.n	8004498 <_svfiprintf_r+0x124>
 800447e:	787b      	ldrb	r3, [r7, #1]
 8004480:	2b2a      	cmp	r3, #42	; 0x2a
 8004482:	d133      	bne.n	80044ec <_svfiprintf_r+0x178>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	1d1a      	adds	r2, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	9203      	str	r2, [sp, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfb8      	it	lt
 8004490:	f04f 33ff 	movlt.w	r3, #4294967295
 8004494:	3702      	adds	r7, #2
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	4d2e      	ldr	r5, [pc, #184]	; (8004554 <_svfiprintf_r+0x1e0>)
 800449a:	7839      	ldrb	r1, [r7, #0]
 800449c:	2203      	movs	r2, #3
 800449e:	4628      	mov	r0, r5
 80044a0:	f7fb feb6 	bl	8000210 <memchr>
 80044a4:	b138      	cbz	r0, 80044b6 <_svfiprintf_r+0x142>
 80044a6:	2340      	movs	r3, #64	; 0x40
 80044a8:	1b40      	subs	r0, r0, r5
 80044aa:	fa03 f000 	lsl.w	r0, r3, r0
 80044ae:	9b04      	ldr	r3, [sp, #16]
 80044b0:	4303      	orrs	r3, r0
 80044b2:	3701      	adds	r7, #1
 80044b4:	9304      	str	r3, [sp, #16]
 80044b6:	7839      	ldrb	r1, [r7, #0]
 80044b8:	4827      	ldr	r0, [pc, #156]	; (8004558 <_svfiprintf_r+0x1e4>)
 80044ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044be:	2206      	movs	r2, #6
 80044c0:	1c7e      	adds	r6, r7, #1
 80044c2:	f7fb fea5 	bl	8000210 <memchr>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d038      	beq.n	800453c <_svfiprintf_r+0x1c8>
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <_svfiprintf_r+0x1e8>)
 80044cc:	bb13      	cbnz	r3, 8004514 <_svfiprintf_r+0x1a0>
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	3307      	adds	r3, #7
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	3308      	adds	r3, #8
 80044d8:	9303      	str	r3, [sp, #12]
 80044da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044dc:	444b      	add	r3, r9
 80044de:	9309      	str	r3, [sp, #36]	; 0x24
 80044e0:	e76d      	b.n	80043be <_svfiprintf_r+0x4a>
 80044e2:	fb05 3202 	mla	r2, r5, r2, r3
 80044e6:	2001      	movs	r0, #1
 80044e8:	460f      	mov	r7, r1
 80044ea:	e7a6      	b.n	800443a <_svfiprintf_r+0xc6>
 80044ec:	2300      	movs	r3, #0
 80044ee:	3701      	adds	r7, #1
 80044f0:	9305      	str	r3, [sp, #20]
 80044f2:	4619      	mov	r1, r3
 80044f4:	250a      	movs	r5, #10
 80044f6:	4638      	mov	r0, r7
 80044f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044fc:	3a30      	subs	r2, #48	; 0x30
 80044fe:	2a09      	cmp	r2, #9
 8004500:	d903      	bls.n	800450a <_svfiprintf_r+0x196>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0c8      	beq.n	8004498 <_svfiprintf_r+0x124>
 8004506:	9105      	str	r1, [sp, #20]
 8004508:	e7c6      	b.n	8004498 <_svfiprintf_r+0x124>
 800450a:	fb05 2101 	mla	r1, r5, r1, r2
 800450e:	2301      	movs	r3, #1
 8004510:	4607      	mov	r7, r0
 8004512:	e7f0      	b.n	80044f6 <_svfiprintf_r+0x182>
 8004514:	ab03      	add	r3, sp, #12
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	4622      	mov	r2, r4
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <_svfiprintf_r+0x1ec>)
 800451c:	a904      	add	r1, sp, #16
 800451e:	4640      	mov	r0, r8
 8004520:	f3af 8000 	nop.w
 8004524:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004528:	4681      	mov	r9, r0
 800452a:	d1d6      	bne.n	80044da <_svfiprintf_r+0x166>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	065b      	lsls	r3, r3, #25
 8004530:	f53f af35 	bmi.w	800439e <_svfiprintf_r+0x2a>
 8004534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004536:	b01d      	add	sp, #116	; 0x74
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	ab03      	add	r3, sp, #12
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4622      	mov	r2, r4
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <_svfiprintf_r+0x1ec>)
 8004544:	a904      	add	r1, sp, #16
 8004546:	4640      	mov	r0, r8
 8004548:	f000 f882 	bl	8004650 <_printf_i>
 800454c:	e7ea      	b.n	8004524 <_svfiprintf_r+0x1b0>
 800454e:	bf00      	nop
 8004550:	08019908 	.word	0x08019908
 8004554:	0801990e 	.word	0x0801990e
 8004558:	08019912 	.word	0x08019912
 800455c:	00000000 	.word	0x00000000
 8004560:	080042bf 	.word	0x080042bf

08004564 <_printf_common>:
 8004564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	4691      	mov	r9, r2
 800456a:	461f      	mov	r7, r3
 800456c:	688a      	ldr	r2, [r1, #8]
 800456e:	690b      	ldr	r3, [r1, #16]
 8004570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004574:	4293      	cmp	r3, r2
 8004576:	bfb8      	it	lt
 8004578:	4613      	movlt	r3, r2
 800457a:	f8c9 3000 	str.w	r3, [r9]
 800457e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004582:	4606      	mov	r6, r0
 8004584:	460c      	mov	r4, r1
 8004586:	b112      	cbz	r2, 800458e <_printf_common+0x2a>
 8004588:	3301      	adds	r3, #1
 800458a:	f8c9 3000 	str.w	r3, [r9]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	bf42      	ittt	mi
 8004594:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004598:	3302      	addmi	r3, #2
 800459a:	f8c9 3000 	strmi.w	r3, [r9]
 800459e:	6825      	ldr	r5, [r4, #0]
 80045a0:	f015 0506 	ands.w	r5, r5, #6
 80045a4:	d107      	bne.n	80045b6 <_printf_common+0x52>
 80045a6:	f104 0a19 	add.w	sl, r4, #25
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	f8d9 2000 	ldr.w	r2, [r9]
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	42ab      	cmp	r3, r5
 80045b4:	dc28      	bgt.n	8004608 <_printf_common+0xa4>
 80045b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	3300      	adds	r3, #0
 80045be:	bf18      	it	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	0692      	lsls	r2, r2, #26
 80045c4:	d42d      	bmi.n	8004622 <_printf_common+0xbe>
 80045c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ca:	4639      	mov	r1, r7
 80045cc:	4630      	mov	r0, r6
 80045ce:	47c0      	blx	r8
 80045d0:	3001      	adds	r0, #1
 80045d2:	d020      	beq.n	8004616 <_printf_common+0xb2>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	68e5      	ldr	r5, [r4, #12]
 80045d8:	f8d9 2000 	ldr.w	r2, [r9]
 80045dc:	f003 0306 	and.w	r3, r3, #6
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	bf08      	it	eq
 80045e4:	1aad      	subeq	r5, r5, r2
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	bf0c      	ite	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	2500      	movne	r5, #0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bfc4      	itt	gt
 80045f6:	1a9b      	subgt	r3, r3, r2
 80045f8:	18ed      	addgt	r5, r5, r3
 80045fa:	f04f 0900 	mov.w	r9, #0
 80045fe:	341a      	adds	r4, #26
 8004600:	454d      	cmp	r5, r9
 8004602:	d11a      	bne.n	800463a <_printf_common+0xd6>
 8004604:	2000      	movs	r0, #0
 8004606:	e008      	b.n	800461a <_printf_common+0xb6>
 8004608:	2301      	movs	r3, #1
 800460a:	4652      	mov	r2, sl
 800460c:	4639      	mov	r1, r7
 800460e:	4630      	mov	r0, r6
 8004610:	47c0      	blx	r8
 8004612:	3001      	adds	r0, #1
 8004614:	d103      	bne.n	800461e <_printf_common+0xba>
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461e:	3501      	adds	r5, #1
 8004620:	e7c3      	b.n	80045aa <_printf_common+0x46>
 8004622:	18e1      	adds	r1, r4, r3
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	2030      	movs	r0, #48	; 0x30
 8004628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800462c:	4422      	add	r2, r4
 800462e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004636:	3302      	adds	r3, #2
 8004638:	e7c5      	b.n	80045c6 <_printf_common+0x62>
 800463a:	2301      	movs	r3, #1
 800463c:	4622      	mov	r2, r4
 800463e:	4639      	mov	r1, r7
 8004640:	4630      	mov	r0, r6
 8004642:	47c0      	blx	r8
 8004644:	3001      	adds	r0, #1
 8004646:	d0e6      	beq.n	8004616 <_printf_common+0xb2>
 8004648:	f109 0901 	add.w	r9, r9, #1
 800464c:	e7d8      	b.n	8004600 <_printf_common+0x9c>
	...

08004650 <_printf_i>:
 8004650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004654:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004658:	460c      	mov	r4, r1
 800465a:	7e09      	ldrb	r1, [r1, #24]
 800465c:	b085      	sub	sp, #20
 800465e:	296e      	cmp	r1, #110	; 0x6e
 8004660:	4617      	mov	r7, r2
 8004662:	4606      	mov	r6, r0
 8004664:	4698      	mov	r8, r3
 8004666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004668:	f000 80b3 	beq.w	80047d2 <_printf_i+0x182>
 800466c:	d822      	bhi.n	80046b4 <_printf_i+0x64>
 800466e:	2963      	cmp	r1, #99	; 0x63
 8004670:	d036      	beq.n	80046e0 <_printf_i+0x90>
 8004672:	d80a      	bhi.n	800468a <_printf_i+0x3a>
 8004674:	2900      	cmp	r1, #0
 8004676:	f000 80b9 	beq.w	80047ec <_printf_i+0x19c>
 800467a:	2958      	cmp	r1, #88	; 0x58
 800467c:	f000 8083 	beq.w	8004786 <_printf_i+0x136>
 8004680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004684:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004688:	e032      	b.n	80046f0 <_printf_i+0xa0>
 800468a:	2964      	cmp	r1, #100	; 0x64
 800468c:	d001      	beq.n	8004692 <_printf_i+0x42>
 800468e:	2969      	cmp	r1, #105	; 0x69
 8004690:	d1f6      	bne.n	8004680 <_printf_i+0x30>
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	0605      	lsls	r5, r0, #24
 8004698:	f103 0104 	add.w	r1, r3, #4
 800469c:	d52a      	bpl.n	80046f4 <_printf_i+0xa4>
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da03      	bge.n	80046ae <_printf_i+0x5e>
 80046a6:	222d      	movs	r2, #45	; 0x2d
 80046a8:	425b      	negs	r3, r3
 80046aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046ae:	486f      	ldr	r0, [pc, #444]	; (800486c <_printf_i+0x21c>)
 80046b0:	220a      	movs	r2, #10
 80046b2:	e039      	b.n	8004728 <_printf_i+0xd8>
 80046b4:	2973      	cmp	r1, #115	; 0x73
 80046b6:	f000 809d 	beq.w	80047f4 <_printf_i+0x1a4>
 80046ba:	d808      	bhi.n	80046ce <_printf_i+0x7e>
 80046bc:	296f      	cmp	r1, #111	; 0x6f
 80046be:	d020      	beq.n	8004702 <_printf_i+0xb2>
 80046c0:	2970      	cmp	r1, #112	; 0x70
 80046c2:	d1dd      	bne.n	8004680 <_printf_i+0x30>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f043 0320 	orr.w	r3, r3, #32
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	e003      	b.n	80046d6 <_printf_i+0x86>
 80046ce:	2975      	cmp	r1, #117	; 0x75
 80046d0:	d017      	beq.n	8004702 <_printf_i+0xb2>
 80046d2:	2978      	cmp	r1, #120	; 0x78
 80046d4:	d1d4      	bne.n	8004680 <_printf_i+0x30>
 80046d6:	2378      	movs	r3, #120	; 0x78
 80046d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046dc:	4864      	ldr	r0, [pc, #400]	; (8004870 <_printf_i+0x220>)
 80046de:	e055      	b.n	800478c <_printf_i+0x13c>
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	1d19      	adds	r1, r3, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6011      	str	r1, [r2, #0]
 80046e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f0:	2301      	movs	r3, #1
 80046f2:	e08c      	b.n	800480e <_printf_i+0x1be>
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6011      	str	r1, [r2, #0]
 80046f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046fc:	bf18      	it	ne
 80046fe:	b21b      	sxthne	r3, r3
 8004700:	e7cf      	b.n	80046a2 <_printf_i+0x52>
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	6825      	ldr	r5, [r4, #0]
 8004706:	1d18      	adds	r0, r3, #4
 8004708:	6010      	str	r0, [r2, #0]
 800470a:	0628      	lsls	r0, r5, #24
 800470c:	d501      	bpl.n	8004712 <_printf_i+0xc2>
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	e002      	b.n	8004718 <_printf_i+0xc8>
 8004712:	0668      	lsls	r0, r5, #25
 8004714:	d5fb      	bpl.n	800470e <_printf_i+0xbe>
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	4854      	ldr	r0, [pc, #336]	; (800486c <_printf_i+0x21c>)
 800471a:	296f      	cmp	r1, #111	; 0x6f
 800471c:	bf14      	ite	ne
 800471e:	220a      	movne	r2, #10
 8004720:	2208      	moveq	r2, #8
 8004722:	2100      	movs	r1, #0
 8004724:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004728:	6865      	ldr	r5, [r4, #4]
 800472a:	60a5      	str	r5, [r4, #8]
 800472c:	2d00      	cmp	r5, #0
 800472e:	f2c0 8095 	blt.w	800485c <_printf_i+0x20c>
 8004732:	6821      	ldr	r1, [r4, #0]
 8004734:	f021 0104 	bic.w	r1, r1, #4
 8004738:	6021      	str	r1, [r4, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d13d      	bne.n	80047ba <_printf_i+0x16a>
 800473e:	2d00      	cmp	r5, #0
 8004740:	f040 808e 	bne.w	8004860 <_printf_i+0x210>
 8004744:	4665      	mov	r5, ip
 8004746:	2a08      	cmp	r2, #8
 8004748:	d10b      	bne.n	8004762 <_printf_i+0x112>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	07db      	lsls	r3, r3, #31
 800474e:	d508      	bpl.n	8004762 <_printf_i+0x112>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	6862      	ldr	r2, [r4, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	bfde      	ittt	le
 8004758:	2330      	movle	r3, #48	; 0x30
 800475a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800475e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004762:	ebac 0305 	sub.w	r3, ip, r5
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	f8cd 8000 	str.w	r8, [sp]
 800476c:	463b      	mov	r3, r7
 800476e:	aa03      	add	r2, sp, #12
 8004770:	4621      	mov	r1, r4
 8004772:	4630      	mov	r0, r6
 8004774:	f7ff fef6 	bl	8004564 <_printf_common>
 8004778:	3001      	adds	r0, #1
 800477a:	d14d      	bne.n	8004818 <_printf_i+0x1c8>
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	b005      	add	sp, #20
 8004782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004786:	4839      	ldr	r0, [pc, #228]	; (800486c <_printf_i+0x21c>)
 8004788:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	1d1d      	adds	r5, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6015      	str	r5, [r2, #0]
 8004796:	060a      	lsls	r2, r1, #24
 8004798:	d50b      	bpl.n	80047b2 <_printf_i+0x162>
 800479a:	07ca      	lsls	r2, r1, #31
 800479c:	bf44      	itt	mi
 800479e:	f041 0120 	orrmi.w	r1, r1, #32
 80047a2:	6021      	strmi	r1, [r4, #0]
 80047a4:	b91b      	cbnz	r3, 80047ae <_printf_i+0x15e>
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	f022 0220 	bic.w	r2, r2, #32
 80047ac:	6022      	str	r2, [r4, #0]
 80047ae:	2210      	movs	r2, #16
 80047b0:	e7b7      	b.n	8004722 <_printf_i+0xd2>
 80047b2:	064d      	lsls	r5, r1, #25
 80047b4:	bf48      	it	mi
 80047b6:	b29b      	uxthmi	r3, r3
 80047b8:	e7ef      	b.n	800479a <_printf_i+0x14a>
 80047ba:	4665      	mov	r5, ip
 80047bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80047c0:	fb02 3311 	mls	r3, r2, r1, r3
 80047c4:	5cc3      	ldrb	r3, [r0, r3]
 80047c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047ca:	460b      	mov	r3, r1
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d1f5      	bne.n	80047bc <_printf_i+0x16c>
 80047d0:	e7b9      	b.n	8004746 <_printf_i+0xf6>
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	6825      	ldr	r5, [r4, #0]
 80047d6:	6961      	ldr	r1, [r4, #20]
 80047d8:	1d18      	adds	r0, r3, #4
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	0628      	lsls	r0, r5, #24
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	d501      	bpl.n	80047e6 <_printf_i+0x196>
 80047e2:	6019      	str	r1, [r3, #0]
 80047e4:	e002      	b.n	80047ec <_printf_i+0x19c>
 80047e6:	066a      	lsls	r2, r5, #25
 80047e8:	d5fb      	bpl.n	80047e2 <_printf_i+0x192>
 80047ea:	8019      	strh	r1, [r3, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	4665      	mov	r5, ip
 80047f2:	e7b9      	b.n	8004768 <_printf_i+0x118>
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	1d19      	adds	r1, r3, #4
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	681d      	ldr	r5, [r3, #0]
 80047fc:	6862      	ldr	r2, [r4, #4]
 80047fe:	2100      	movs	r1, #0
 8004800:	4628      	mov	r0, r5
 8004802:	f7fb fd05 	bl	8000210 <memchr>
 8004806:	b108      	cbz	r0, 800480c <_printf_i+0x1bc>
 8004808:	1b40      	subs	r0, r0, r5
 800480a:	6060      	str	r0, [r4, #4]
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	6123      	str	r3, [r4, #16]
 8004810:	2300      	movs	r3, #0
 8004812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004816:	e7a7      	b.n	8004768 <_printf_i+0x118>
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	462a      	mov	r2, r5
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d0aa      	beq.n	800477c <_printf_i+0x12c>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	079b      	lsls	r3, r3, #30
 800482a:	d413      	bmi.n	8004854 <_printf_i+0x204>
 800482c:	68e0      	ldr	r0, [r4, #12]
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	4298      	cmp	r0, r3
 8004832:	bfb8      	it	lt
 8004834:	4618      	movlt	r0, r3
 8004836:	e7a3      	b.n	8004780 <_printf_i+0x130>
 8004838:	2301      	movs	r3, #1
 800483a:	464a      	mov	r2, r9
 800483c:	4639      	mov	r1, r7
 800483e:	4630      	mov	r0, r6
 8004840:	47c0      	blx	r8
 8004842:	3001      	adds	r0, #1
 8004844:	d09a      	beq.n	800477c <_printf_i+0x12c>
 8004846:	3501      	adds	r5, #1
 8004848:	68e3      	ldr	r3, [r4, #12]
 800484a:	9a03      	ldr	r2, [sp, #12]
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	42ab      	cmp	r3, r5
 8004850:	dcf2      	bgt.n	8004838 <_printf_i+0x1e8>
 8004852:	e7eb      	b.n	800482c <_printf_i+0x1dc>
 8004854:	2500      	movs	r5, #0
 8004856:	f104 0919 	add.w	r9, r4, #25
 800485a:	e7f5      	b.n	8004848 <_printf_i+0x1f8>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ac      	bne.n	80047ba <_printf_i+0x16a>
 8004860:	7803      	ldrb	r3, [r0, #0]
 8004862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800486a:	e76c      	b.n	8004746 <_printf_i+0xf6>
 800486c:	08019919 	.word	0x08019919
 8004870:	0801992a 	.word	0x0801992a

08004874 <memcpy>:
 8004874:	b510      	push	{r4, lr}
 8004876:	1e43      	subs	r3, r0, #1
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	bd10      	pop	{r4, pc}
 8004880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004888:	e7f7      	b.n	800487a <memcpy+0x6>

0800488a <memmove>:
 800488a:	4288      	cmp	r0, r1
 800488c:	b510      	push	{r4, lr}
 800488e:	eb01 0302 	add.w	r3, r1, r2
 8004892:	d807      	bhi.n	80048a4 <memmove+0x1a>
 8004894:	1e42      	subs	r2, r0, #1
 8004896:	4299      	cmp	r1, r3
 8004898:	d00a      	beq.n	80048b0 <memmove+0x26>
 800489a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048a2:	e7f8      	b.n	8004896 <memmove+0xc>
 80048a4:	4283      	cmp	r3, r0
 80048a6:	d9f5      	bls.n	8004894 <memmove+0xa>
 80048a8:	1881      	adds	r1, r0, r2
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	42d3      	cmn	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memmove+0x28>
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048ba:	e7f7      	b.n	80048ac <memmove+0x22>

080048bc <_realloc_r>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	4607      	mov	r7, r0
 80048c0:	4614      	mov	r4, r2
 80048c2:	460e      	mov	r6, r1
 80048c4:	b921      	cbnz	r1, 80048d0 <_realloc_r+0x14>
 80048c6:	4611      	mov	r1, r2
 80048c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048cc:	f7ff bbe8 	b.w	80040a0 <_malloc_r>
 80048d0:	b922      	cbnz	r2, 80048dc <_realloc_r+0x20>
 80048d2:	f7ff fb97 	bl	8004004 <_free_r>
 80048d6:	4625      	mov	r5, r4
 80048d8:	4628      	mov	r0, r5
 80048da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048dc:	f000 f814 	bl	8004908 <_malloc_usable_size_r>
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d20f      	bcs.n	8004904 <_realloc_r+0x48>
 80048e4:	4621      	mov	r1, r4
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff fbda 	bl	80040a0 <_malloc_r>
 80048ec:	4605      	mov	r5, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d0f2      	beq.n	80048d8 <_realloc_r+0x1c>
 80048f2:	4631      	mov	r1, r6
 80048f4:	4622      	mov	r2, r4
 80048f6:	f7ff ffbd 	bl	8004874 <memcpy>
 80048fa:	4631      	mov	r1, r6
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff fb81 	bl	8004004 <_free_r>
 8004902:	e7e9      	b.n	80048d8 <_realloc_r+0x1c>
 8004904:	4635      	mov	r5, r6
 8004906:	e7e7      	b.n	80048d8 <_realloc_r+0x1c>

08004908 <_malloc_usable_size_r>:
 8004908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800490c:	1f18      	subs	r0, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfbc      	itt	lt
 8004912:	580b      	ldrlt	r3, [r1, r0]
 8004914:	18c0      	addlt	r0, r0, r3
 8004916:	4770      	bx	lr

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
